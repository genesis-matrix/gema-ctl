# -*- mode: org -*-
#+SETUPFILE: ~/.vault/cfgs/org-central/org-setupfile
#+TITLE: notes on Genesis // Lexicon

** defined-terms
   :PROPERTIES:
   :ID:       0141C84D-6A39-4278-ADB4-17BC175968E8
   :END:
 - graph :: aka <<<salt-graph>>> or <<<node-graph>>>. the collection of machines in an environment that are capable and presently enabled for coordinated control via Salt.
   - in the most typical case, this is a list of machines with the salt-minion installed that are connected to the salt-master
   - the intended reference is to https://en.wikipedia.org/wiki/Graph_theory , to be disambiguated from https://en.wikipedia.org/wiki/Chart
   - defined in contrast to: horde
 - <<horde>> :: the collection of machines in an environment that are _not_ presently enabled for coordinated control via Salt.
   - in a typical case, the horde are the machines that are not joined to the graph, encompassing a variety of reasons:
     - not yet evaluated for inclusion into the graph
     - lacking a feasable capability to join the graph
     - are unknown unknowns aka "rogue", or otherwise unaccounted
 - attributes :: aka, <<targeting-attributes>>. The collected information about graph members that is considered for evaluation during a specific targetting clause
   - attributes are a generalization, (a/ an attempt at simplifying communication), around the varied means of targetting
   - attributes are also an attempt to excersize discipline, (in the interest of comprehensibility, maintainability a/ ultimately sustainability)
   - attributes are also an attempt at minimizing unnecessary changes w/i top files, preventing risk and isolating highly-mutable configs
   - among the (potentially highly-dynamic) set of data items, (grains, pillars, etc), available to a particular minion, only some will be regarded as attributes.
   - Q: should attributes map to node groups, perhaps only 'read-only' attributes
 - <<baseline vm>> :: a type of VM image, typically intended to be minimalistic while reflecting established best practices
   - a "baseline vm" is a vm build type, alongside and in contrast to the [[turnkey vm]] type
 - <<turnkey vm>> :: a VM 
   - a "turnkey vm" is a vm build type, alongside and in contrast to the [[baseline vm]] type
 - Genesis Matrix :: aka <<<GeMa>>>
   - a collection of actionable notions interested in sanely organizing the DNA of a system, (or sets of systems), at arbitrary phases of design, implementation, and test/validation.
   - the principle tools are: Vagrant, Salt, Git, Packer
   - the principle concepts are: the runnable repo, infrastructure as code, TDD, repeatable research
 - Genesis Controller :: aka <<<genesis-ctl>>>
   - a practical point of entry and control for the genesis matrix concept and tooling
 - scene(s) :: a collection of system(s) state and the discrete means to repeatably share and reproduce it
   - aka <<<gema-scene>>> or scenario or <<<gema-scenario>>>
   - at present, ([2016-08-20 Sat]), scene details are implemented first by describing/arranging machines and their attributes in a purpose-oriented salt roster file
   - a scene may include the capability, (often using tools and information from GeMa), to transition into a different scene
   - in this way scenes may be linked, (intentionally or otherwise) into a state change graph
   - GeMa and genesis-ctl are intended as tools for designing, implementing, testing, managing and presenting scenes
 - state :: the notion of a systems' configuration state
   - ideally, state will be procedurally achievable through use of GeMa
   - are generally rendered via their =provision_target= and hypervisor,
     - for GeMa this is most typically, (though not exclusively) the respective pairing of Vagrant and VMware Fusion

