#+SETUPFILE: ~/.vault/cfgs/org-central/org-setupfile
#+TITLE: notes on Genesis // Salt

* synopsis
* advisement
* chapters
** Introduction to Salt
:PROPERTIES:
:ID: b8d8930b-a19d-4a72-9cf0-63c5231e70dc
:END:

 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: b8d8930b-a19d-4a72-9cf0-63c5231e70dc-srcs
       #+CAPTION: reference list
       | ! | title | url                    | desc | rowid   |
       |   | title | url                    | desc | rowid   |
       |---+-------+------------------------+------+---------|
       | / |       |                        |      | <7>     |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Initial Understanding a/o Discovery
       - =file_roots= doesn't support relative paths, (nor does it respect =root_dir=)
         - if it did I'd be able to make this repo path independent. Alas,
           for now the =file_roots=, (and only the =file_roots=), need to be
           checked and probably updated after each clone or repo move
       - use =nodegroups= for classifying nodes on the master, grains (custom
         or otherwise) are intrinsicly generated by each respective minion
       - the config used prefers =nodegroups= to group machines into
         "psuedo-roles"
       - a minion may be a member of any number of =nodegroups=
       - =nodegroups= are defined in the =/etc/salt/master= file
       - =nodegroups= are created (roughly/conceptually) as
         : <Role> = <App>-<Env> and <Context> 
         - where "<Role>" corresponds to the nodegroup name
         - where "<App>" corresponds to a/the use of a machine/group
           - the app should be lowercase'd where possible
         - where "<Env>" corresponds to the salt environment a/o the
           operating environment
           - this may be either "PROD" or "Tokyo Office"
           - the environment should be in all caps, where possible
         - "<Context>" is basically like an OU
           - see 
   - Questions
   - log
** on Getting Started w/ Salt
:PROPERTIES:
:ID: CD332693-EE10-49EC-B41D-A070871907F0
:END:
:LOGBOOK:
:END:
[2015-10-28 Wed 00:34]
[[git:~/.extrefs/genesis-ctl/ReadMe.org::master@{2015-10-28}::626][git:~/.extrefs/genesis-ctl/ReadMe.org::master@{2015-10-28}::626]]
 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: CD332693-EE10-49EC-B41D-A070871907F0-srcs
       #+CAPTION: reference list
       |!|title|url|desc|rowid|
       | |title|url|desc|rowid|
       |-|-----|---|----|-----|
       |/|     |   |    | <7> |
       |#|     |   |    |     |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Initial Understanding a/o Discovery
   - Questions
     - Q: are =lpass-cli= or =keybase= a good means to move secured files for initial bootstrapping of a Salt Master
   - log
 - procedure :: setup vagrant'd =salt-master=
   - bring up VM of =salt-master=
     #+BEGIN_SRC bash :dir ~/.vault/uris/genesis-ctl
     vagrant up salt-master-t1
     #+END_SRC
   - symlink master config to quick-n-dirty vagrant configs
     #+BEGIN_SRC bash :dir ~/.vault/uris/genesis-ctl :results output 
     vagrant ssh salt-master-t1 -c 'for i in "conf.master.auto_accept..true.conf" "conf.master.file_roots..genesisctl-vagrant.conf" "conf.master.pillar_roots..genesisctl-vagrant.conf" ;do sudo ln -s /vagrant/etc/salt/conf.d/${i} /etc/salt/master.d/${i} ;done ; sudo systemctl restart salt-master'
     #+END_SRC

*** info, Jinja2 Templating
:PROPERTIES:
:ID: 42040B3C-901B-4478-B7B1-6F83836623FD
:END:
[2016-03-19 Sat 20:17]
[[git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-19}::854][git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-19}::854]]
 - context ::
   - [/] overview
   - info/notes
     - srcs
       #+NAME: 42040B3C-901B-4478-B7B1-6F83836623FD-srcs
       #+CAPTION: reference list
       | ! | title | url                                                                               | desc | rowid   |
       |   | title | url                                                                               | desc | rowid   |
       |---+-------+-----------------------------------------------------------------------------------+------+---------|
       | / |       |                                                                                   |      | <7>     |
       | # |       | http://stackoverflow.com/questions/20678004/jinja2-split-string-by-white-spaces   |      | <<7C1BFDBA-0111-4AB6-9379-AE45C83E5537>> |
       | # |       | https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html |      | <<BF531B28-56B1-457F-BA47-2F0817E7DE96>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
   - Questions
   - log
*** howto, Bootstrap a Master in Genesis
:PROPERTIES:
:ID: 1E0AE445-76DD-4510-9997-A1EB91092F23
:END:
[2016-03-10 Thu 19:18]
[[git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-10}::1190][git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-10}::1190]]
 - context ::
   - [0/1] overview
     - [ ] connect to git sls, plr, cfg and pki repos for config
     - 
   - Info/notes
     - srcs
       #+NAME: 1E0AE445-76DD-4510-9997-A1EB91092F23-srcs
       #+CAPTION: reference list
       |!|title|url|desc|rowid|
       | |title|url|desc|rowid|
       |-|-----|---|----|-----|
       |/|     |   |    | <7> |
       |#|     |   |    |     |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Initial Understanding a/o Discovery
     - on Desired State Description a/o Requirements
       |   | pri |                                |   |
       |---+-----+--------------------------------+---|
       |   |   1 | pki in sync'd git              |   |
       |   |   1 | off-host logging               |   |
       |   |   1 | config changes via CM          |   |
       |   |   2 | no reboot on targeting changes |   |
       |   |   3 | merge conf.d into pillar       |   |
       |   |   2 | LDAP integration               |   |
       |   |   3 | Consul intergration            |   |
       |   |   3 | REST API via rest_tornado      |   |
       |   |     |                                |   |
       - off-host logging
       - local minion
       - pillar-driver config
       - initial states, pillar, pki should pull via gitfs
       - 
   - Questions
     - Q: how to organize pillars for: A/B testing, dynamic/layered pillars: Consul, LDAP
   - log

** on Salt CLI, Interactive a/o Imperative Operation w/ the =salt= CLI a/ the =salt-ssh= subsystem
 - context ::
   - info/notes
     - on Initial Understanding a/o Discovery
     - on Querying Grains
       - grains are the collection of largely-static key value pairs associated with each minion
       - there are several and they can be added easily
       - the grains avialable on a minion can be listed for (ex.) 'minion01a' as =salt 'minion01a' grains.ls=
       - the grains describing an operating system tend to be the easiest to demonstrate
         #+NAME: d467e871-074e-43e8-8b98-69299e7e8f5c
         |   | grain          | example_result_mswin     | example_result_linux | example_invocation                              |
         |---+----------------+--------------------------+----------------------+-------------------------------------------------|
         |   | os             | Windows                  | CentOS               | =salt 'Ulysses10Vi.marketing-dept.com' grains.item os= |
         |   | os_family      | Windows                  | RedHat               |                                                 |
         |   | osfullname     | Microsoft Windows 10 Pro | CentOS Linux         |                                                 |
         |   | osmanufacturer | Microsoft Corporation    |                      |                                                 |
         |   | osrelease      | 8                        | 7.2.1511             |                                                 |
         |   | osversion      | 10.0.10586               |                      |                                                 |
         |---+----------------+--------------------------+----------------------+-------------------------------------------------|
 - procedure :: machine actions
   - reboot
     : salt 'example-target' system.reboot
   - shutdown
     : salt 'example-target' system.shutdown
   - change run level
     : salt 'example-target' system.init 3
   - power off
     : salt 'example-target' system.poweroff
 - procedure :: common operations on services
   - list all services
     : salt 'example-target' service.get_all
     : salt 'example-target' service.status ntpd
     : salt 'example-target' service.available ntpd
   - start, stop, reload, restart
     : salt 'example-target' service.reload ntpd
     : salt 'example-target' service.restart ntpd
     : salt 'example-target' service.start ntpd
     : salt 'example-target' service.stop ntpd
     : salt 'example-target' service.enable ntpd
     : salt 'example-target' service.disable ntpd
   - list, show
     : salt 'example-target' service.show <service name>
     : salt 'example-target' service.status <service name>
 - procedure :: common interogation operations
   - get system platform key-val info
     : salt 'example-target' grains.item oscodename
 - procedure :: common operations, testing a/o asserting
   - run specific DEBUG states (nb, this runs in the *base* environment)
     : salt 'gs450nlm37' state.sls _DEBUG.dbg-stateconf-noop
   - get specific minion data (ex. operating system)
     : salt/ 'gs450nlm37' grains.item os
   - get specific minion data (ex. fully qualified domain name)
     : salt/ 'gs450nlm37' grains.item fqdn
   - get all grain data from a minion
     : salt 'gs450nlm37' grains.items
   - query the version of a particular package
     : salt 'example-target' pkg.version libxt-dev
   - check if a service is running
     : salt 'example-target' service.running name ntpd
 - procedure :: common operations, from master
   - list minions by connection status: "up" for connected, "down" for not connected
     : salt-run manage.status
   - list only minions w/ an active connection to the master
     : salt-run manage.up
   - list only minions that the master is not currently connected to
     : salt-run manage.down
   - print documentation for =salt-run='s set of =salt-master=-oriented commands
     : salt-run -d
   - list currently active jobs
     : salt-run jobs.active
   - issue an HTTP request, using for REST-style interaction
     : salt-run http.query
   - update local file caches of gitfs-backed files
     : salt-run git_pillar.update
 - procedure :: common operations, querying for patches and software packages
   - list minions w/ upgradable =openssh-clients= packages on CentOS machines
   - asdf
     : salt --out=txt -C 'G@os:CentOS' pkg.upgrade_available openssh-clients | sed -ne 's/\(.*\): True$/\1/p' | wc -l
   - upgrade =openssh-clients= on CentOS minions
     :
   - list _all_ upgradable packages, (the =refresh= is optional)
     : salt 'example' pkg.list_upgrades refresh=True
   - list the upgrade available to a specific package
     : salt -G 'os:CentOS' pkg.upgrade_available kernel
   - list kernel version on all Linux minions, (uses PCRE on Grains to target Linux minions)
     : salt -P 'osfullname:*Linux' pkg.version kernel
   - check for available upgrades on a package
     : salt 'example-target' pkg.upgrade_available vim
   - install a/o update package from 'testing' repo
     : salt 'example-target' pkg.install libxt-dev fromrepo=testing
   - (wip) install latest version of a package
     : salt 'example-target' pkg.latest_version emacs24-nox
   - list files associated with a package
     : salt 'example-target' pkg.file_list libxt-dev
   - update all packages, equivalent to =aptitude safe-upgrade=
     : salt 'example-target' pkg.upgrade
   - check package version, (blank if not installed)
     : salt 'example-target' pkg.version openssh-server
   - get system info
     : salt 'example-target' pkg.list_pkgs
     : salt 'example-target' pkg.list_repos
*** info, Salt SSH
:PROPERTIES:
:ID:       7ba1e552-16dc-463b-9838-13b7132cd45b
:session: 7ba1e552-16dc-463b-9838-13b7132cd45b-session
:dir: /salt:
:results: drawer
:END:
 - context ::
   - [/] overview
   - info/notes
     - There are a few packages needed for salt-ssh which are not
       advertised and may affect feature-availability. This can be
       checked by typing =salt-ssh --versions-report= at the command line.
       - python-m2crypto
       - msgpack-python || python-msgpack
       - pyzmq
       - python-zmq
   - Questions
     - Q: it appears that salt states are not being detected, although
       the path is set in a master.d/conf.* file
       - A: apparently it's absolutely required that an abspaths
       definition for the base environment as defined in 'file_roots'
       - Q: could https://github.com/saltstack/salt/issues/8271 be to blame
       - the =file_roots= path is *not* affected by the =root_dir= setting
	 - only =pki_dir=, =cachedir=, =sock_dir=, =log_file=, =autosign_file=,
           =autoreject_file=, =pidfile= are
       - The 'Jinja search path' displays a list of paths that are
	 checked for states. As is presently ([2014-07-28 Mon])
	 configured it only includes
	 [[./var/cachesalt/master/files/base]] but should also
	 include [[./srv/salt/roots/file/base]] et. al.
       - Q: could it be that salt-ssh needs salt to be installed
     - Q: how to resolve 'ERROR: sudo is configure with requiretty'
       - encountered [2015-02-22 Sun 20:44] during inital salt setup
         for SFCG's new Cent7 platform
       - A: add =tty: True= to the roster config of the affected minion
       - fix, for =ssh= in normal use is to add the =-t= option to force remote terminal allocation 
         : ssh -t hostname sudo <command>
     - Q: w/ =salt-ssh=, do the =sudo: True= and =Password: <passwd>= configs properly combine to supply the password when needed by sudo
       - observed blocking on =sudo= prompt, (using =-l all=) so it certainly looks like the answer is no
   - log
     - [2014-07-28 Mon 12:45]
       - =test.ping= and raw-shell calls are working, but not states
     - [2014-07-28 Mon 18:05]
       - looking into building from upstream HEAD
     - [2014-08-18 Mon 18:24]
       - upgraded to 2014.1.10, nodegroups selection in top files using L, globs
         are working. cli nodegroup selection still not working
 - procedure :: howto, install packages using salt-ssh
   - example command, 
     : salt '*' state.single pkg.installed name=vim
 - procedure :: run git-local salt-ssh
   - specify the config-dir (otherwise it defaults to [[/etc/salt]]) from
     the git root dir
     : salt-ssh --config-dir ./etc/salt sys.doc sys
 - procedure :: commands useful while testing
   - test an individual salt state
     : salt-ssh --config-dir ./etc/salt '*' state.single dbg-state-noop demo-test
   - asdf
     : salt-ssh -c ./etc/salt '*' state.show_top
     : salt-ssh -c ./etc/salt '*' state.show_sls dbg-stateconf-noop
     : salt-ssh -l debug -c ./etc/salt '*' 
 - procedure :: manual setup (revised: [2014-11-26 Wed])
   - create a =tyranusrex= system account w/ userhome, [[/var/lib/tyranusrex]]
     #+NAME: tyranusrex-adduser
     #+BEGIN_SRC sh
       sudo adduser --system --group --shell /bin/sh --disabled-password --home /var/lib/tyranusrex tyranusrex
     #+END_SRC
   - verify the tyranusrex account is password-locked (default), leaving
     asym-key auth available, (provided it otherwise would be)
     #+CAPTION: to confirm tyranusrex account is lock, look for the 'L'
     #+NAME: tyranusrex-passwd-status
     #+BEGIN_SRC sh
       sudo passwd -S tyranusrex
     #+END_SRC
   - prep the [[~/.ssh]] dir and userhome perms
     #+NAME: tyranusrex-sshdir-init
     #+BEGIN_SRC sh
       sudo mkdir -p ~tyranusrex/.ssh && sudo chown -R tyranusrex:tyranusrex ~tyranusrex && sudo chmod -R g=,o= ~tyranusrex
     #+END_SRC
   - add restricted commands and pubkey to [[~/.ssh/authorized_keys]], (below is the actual ALPHA config)
     - create [[~tyranusrex/.ssh/authorized_keys]]
       #+NAME: tyranusrex-authkey-init
       #+BEGIN_SRC sh
       sudo touch ~tyranusrex/.ssh/authorized_keys
       sudo chmod 700 ~tyranusrex/.ssh && sudo chmod 600 ~tyranusrex/.ssh/authorized_keys
       sudo chown -R tyranusrex:tyranusrex ~tyranusrex
       #+END_SRC
     - as =tyranusrex= user, add the authorizing content to [[~tyranusrex/.ssh/authorized_keys]]
       #+NAME: tyranusrex-authkey-reset
       #+BEGIN_SRC sh
         echo 'no-agent-forwarding,no-pty,no-user-rc,no-X11-forwarding ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC4Ow6ToDmVMMdGq6gmKeO1ei1EQSMktcEKGil5kXZhR32L5vzywibTGxtQZIrHasg0foB3QfjecvIObS6wnmJXbRcl7G2XiyL+CbtBb8+HcTPAHswFjUgBUr/5ZD8VBYSweoGzuduW2sjI33ZAP3P4C/j6HSKpDQP/UWD/SO90xMKmTY4D3g4uha+IcIkgc4nQdfMJSfeyBPza7VVV1C1dCy1+4HnXYZgPfVLSjLMjU5H//Wfd5pbGsfE1vk8ickfIDH3nV9JZJIvTXgdpu5CwCAaDgK+/szLi/TDl1tndp6FGQqpvM0tNORJuBv4Vthcf7FRV3zDIotbjRW45CFnYjIdZ+0JwnHGhFayt4Go5sn8pUimw995T+V0caUQVq+LSF73tapQEun0ImZHE/GEL8LhseTX9PRB8LhiiLEWp5bYvUhhQjzsu5dy4uQD1BuHpMWYDilkvfQInLEQ3jb67iQJrZ32kOU1DikO8dlMvC01Ru+a0k8us65UsyFMEz758h5TijJJ9qyCntUQ/ZUWIdD8ipOI7lAJ9GMXQp72CDUe9BBZD1vKUQF4M6vbIvt+dbTKohmNRW2ZfpLWIHDAyutdlfUKLNi3eHeeNlB52DZj816z1WdD7Y5DEqSONMsimIcumKHK2UAR3m7krDJHcE4+2pZG2JG1G5Gyfg7w6Uw== tyranusrex@prototypeAlphaBARIUM' | sudo -u tyranusrex tee ~tyranusrex/.ssh/authorized_keys ; history -c
       #+END_SRC
   - add ty-rex to sudoers (all, nopasswd)
     #+NAME: tyranusrex-sudoers-addpolicyfile
     #+BEGIN_SRC sh 
       tmp_uri=$(sudo mktemp)
       echo -e "\n# Infrastructure Controller Account\ntyranusrex ALL = (ALL:ALL) NOPASSWD: ALL\n" | sudo tee "${tmp_uri}"
       sudo chmod 0440 "${tmp_uri}"
       sudo mv -f "${tmp_uri}" /etc/sudoers.d/Alpha-ctl-acct
       unset tmp_uri
     #+END_SRC
   - Probably, you are now done with this machine. Now to test.
 - procedure :: test a/o verify =tyranusrex= account setup
   - add machine and login account to [[./etc/salt/roster]] file
     #+CAPTION: example for Alpha37 below
     #+BEGIN_EXAMPLE
       prototypeAlpha37:
         host: 128.183.234.20
         user: tyranusrex
         sudo: True
         priv: ~/.ssh/tyranusrex_sshkey
         ssh_agent: True
     #+END_EXAMPLE
   - test ping using ty-rex 
     : salt-ssh 'tgt_machine' test.ping
     - you may need to ssh once to accept host keys
       : ssh -i ~/.ssh/tyranusrex_sshkey tyranusrex@prototypeAlphaXX.acme.co.uk
   - confirm account password is locked
     : salt-ssh -c ./etc/salt 'prototypenlmXX' -r 'sudo passwd --status tyranusrex'
     - when locked, the second field will hold a "L" as below
       : tyranusrex L 08/01/2014 0 99999 7 -1
     - disable password logins for ty-rex, if needed
       : salt-ssh -c ./etc/salt 'prototypenlmXX' -r 'sudo passwd -l tyranusrex'
 - procedure :: (wip) automated ty-rex deploy
   - ssh to the target machine
   - create the user
     : sudo adduser tyranusrex
   - set a password to use temporarily (make sure to disable!)
     : sudo passwd tyranusrex
   - add ty-rex to sudoers (all, nopasswd)
     #+BEGIN_EXAMPLE
     # NLM Infrastructure Controller Account
     tyranusrex ALL = (ALL:ALL) NOPASSWD: ALL
     #+END_EXAMPLE
   - push the pubkey to the target server using salt
     : ssh-copy-id -i ~/.ssh/tyranusrex_sshkey.pub tyranusrex@prototypenlm11.acme.co.uk
     - one day I'll replace the above =ssh-copy-id= command w/ this
       : salt-ssh -c ./etc/salt --passwd --ignore-host-keys --key-deploy
   - test ping using ty-rex 
     : salt-ssh 'tgt_machine' test.ping
   - disable password logins for ty-rex (extremely important!!!)
     : salt-ssh -c ./etc/salt 'prototypenlm11' -r 'sudo passwd -l tyranusrex'
   - confirm account status
     : salt-ssh -c ./etc/salt 'prototypenlm11' -f 'sudo password --status tyranusrex'
   - when locked, the second field will hold a "L" as below
     : tyranusrex L 08/01/2014 0 99999 7 -1
 - procedure :: (wip) howto, use GPG-encrypted Secrets in Roster
   - nb
     - No python libraries are required as of the 2015.8.3 release. For previous salt versions installing =python-gnupg= is required
 - procedure :: common operations, =salt-ssh=

     : salt-ssh -c ./etc/salt 'prototypeAlpha37' state.sls _DEBUG.dbg-stateconf-noop
   - get specific minion data (ex. operating system)
     : salt-ssh -c ./etc/salt/ 'prototypeAlpha37' grains.item os
   - get specific minion data (ex. fully qualified domain name)
     : salt-ssh -c ./etc/salt/ 'prototypeAlpha37' grains.item fqdn
   - get all grain data from a minion
     : salt-ssh -c ./etc/salt 'prototypeAlpha37' grains.items
   - query the version of a particular package
     : salt-ssh -c ./etc/salt '*37' pkg.version libxt-dev
   - check if a service is running
     : salt-ssh -c ./etc/salt '*37' service.running name ntpd
** on Salt API, (REST, et al)
*** Network REST API
:PROPERTIES:
:ID: 635D3FC2-512A-451C-B2DA-7BABD5AB3A9B
:END:
:LOGBOOK:
:END:
[2016-02-18 Thu 15:19]
[[git:~/.vault/uris/genesis-ctl/usr/doc/ref-Salt.org::master@{2016-02-18}::9][git:~/.vault/uris/genesis-ctl/usr/doc/ref-Salt.org::master@{2016-02-18}::9]]
 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: 635D3FC2-512A-451C-B2DA-7BABD5AB3A9B-srcs
       #+CAPTION: reference list
       | ! | title | url                                                                                   | desc | rowid   |
       |   | title | url                                                                                   | desc | rowid   |
       |---+-------+---------------------------------------------------------------------------------------+------+---------|
       | / |       |                                                                                       |      | <7>     |
       | # |       | http://bencane.com/2014/07/17/integrating-saltstack-with-other-services-via-salt-api/ |      | <<FCDACFE3-C17D-4F5F-9022-FA2F415C139C>> |
       | # |       | http://www.thereluctanttecchie.com/salt_api_a_crash_course/                           |      | <<BC462FF1-7CD3-41FB-98C8-BAE02ED2BE89>> |
       | # |       | https://manned.org/salt-api/adedd5b3                                                  |      | <<53F3608D-B361-4E77-9A7E-6C092D4E92A3>> |
       | # |       | https://coderwall.com/p/jcxcba/basic-usage-of-salt-api                                                                                      |      | <<733C0E12-5CC6-431D-BFAF-390503E8F7A0>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Initial Understanding a/o Discovery
   - Questions
     - 
   - log
     - [2016-02-18 Thu]
       - [2016-02-18 Thu 15:19] first run, going through the paces
 - procedure :: setup Salt's Net API on CentOSv6
   - =yum install python-pip=
   - =pip install cherrypy=
   - =salt-call --local tls.create_self_signed_cert=
     #+BEGIN_EXAMPLE
       [root@SV-SALTMASTER-T1 vagrant]# salt-call --local tls.create_self_signed_cert
       'tls' __virtual__ returned False: PyOpenSSL version 0.10 or later must be installed before this module can be used.
     #+END_EXAMPLE
   - =yum install pyOpenSSL=
   - =salt-call --local tls.create_self_signed_cert=
     #+BEGIN_EXAMPLE
       [root@SV-SALTMASTER-T1 vagrant]# salt-call --local tls.create_self_signed_cert
       local:
           Created Private Key: "/etc/pki/tls/certs/localhost.key." Created Certificate: "/etc/pki/tls/certs/localhost.crt."
     #+END_EXAMPLE
   - 
** on Salt States a/o Formulae
:PROPERTIES:
:ID: F71FCF5C-B465-4BAC-80C0-A892A928FFB9
:END:
[2016-03-19 Sat 20:24]
[[git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-19}::1374][git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-19}::1374]]
 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: F71FCF5C-B465-4BAC-80C0-A892A928FFB9-srcs
       #+CAPTION: reference list
       | ! | title              | url                                    | desc                            | rowid   |
       |   | title              | url                                    | desc                            | rowid   |
       |---+--------------------+----------------------------------------+---------------------------------+---------|
       | / |                    |                                        |                                 | <7>     |
       | # | irtnog/salt-states | https://github.com/irtnog/salt-states/ | IRTNOG Salt State (SLS) modules | <<9D8A79A1-B2E3-45C3-B7A2-712892871BD5>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Caching Salt Provider Credentials
       - the credentials for the 'vsphere_nlmcloud' provider are too sensitive to record in this repo
       - Q: could =salt-cloud='s =--set-password=<USERNAME> <PROVIDER>= argument be used
         #+BEGIN_QUOTE
          Cloud Credentials:
          --set-password=<USERNAME> <PROVIDER>
                        Configure password for a cloud provider and save it to the keyring. PROVIDER can be specified with or without a driver, for example: "--set-
                        password bob rackspace" or more specific "--set-password bob rackspace:openstack" DEPRECATED!
         #+END_QUOTE
         - looks like this isn't currently, (as of [2015-02-13 Fri]), viable
     - on Salt Environments
       - base
         - MISC
           - DEBUG
             - debug is not technically a environment but is generally made
               available similarly in order to provide a chest of useful
               state snippets for imperative testing and interogation
             - this should probably _never_ be included in a automated environment
           - INERT
             - a place to put states in order to remove them from use
           - TRIAL
             - a place for states that are maturing for eventual use
         - config
           - apps
           - services
         - assets
         - context
   - Questions
   - log
*** Refactoring for Modular a/ DRY States
 - context ::
   - info/notes
     - =map.jinja= file paths are apparently rooted in the environment dir
*** howto, Salt Formulae
:PROPERTIES:
:ID: 242EFE27-753E-4A43-AF39-05880846059F
:END:
[2016-03-12 Sat 19:41]
[[git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-12}::878][git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-12}::878]]
 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: 242EFE27-753E-4A43-AF39-05880846059F-srcs
       #+CAPTION: reference list
       | ! | title                              | url                                                                                      | desc                                                                                                                       | rowid   |
       |   | title                              | url                                                                                      | desc                                                                                                                       | rowid   |
       |---+------------------------------------+------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------+---------|
       | / |                                    |                                                                                          |                                                                                                                            | <7>     |
       | # |                                    | https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html        |                                                                                                                            | <<D4C21613-219F-4861-84AD-41969D419379>> |
       | # |                                    | https://docs.saltstack.com/en/latest/topics/tutorials/gitfs.html#gitfs-per-remote-config |                                                                                                                            | <<2BA139B3-CC33-4004-97EF-DCCB8380F891>> |
       | # |                                    | https://github.com/saltstack-formulas/salt-formula                                       |                                                                                                                            | <<D8A279A5-1C88-4DB7-B429-E9CCD2C86588>> |
       | # |                                    | https://github.com/saltstack-formulas/mysql-formula                                      |                                                                                                                            | <<BB8E9E72-2279-4FA1-B326-25F2D8A2B550>> |
       | # |                                    | https://github.com/saltstack-formulas/vmware-tools-formula                               |                                                                                                                            | <<48B412AC-522E-4255-B0E8-D6D7EFC74065>> |
       | # |                                    | https://github.com/saltstack-formulas/hadoop-formula                                     |                                                                                                                            | <<4F9B3014-EA1B-41BD-AFAF-FD6564C65F05>> |
       | # |                                    | https://github.com/saltstack-formulas/firewalld-formula                                  |                                                                                                                            | <<BA9B8CF0-4F7B-4F7D-81C9-C373DE2BEA0F>> |
       | # |                                    | https://github.com/saltstack-formulas/openssh-formula                                    |                                                                                                                            | <<8E3A814E-C3C0-4879-923C-7D424487976B>> |
       | # |                                    | https://github.com/saltstack-formulas/iptables-formula                                   |                                                                                                                            | <<CF5DD23C-939B-4D74-9085-487B8627340A>> |
       | # |                                    | https://github.com/saltstack-formulas/packer-formula                                     |                                                                                                                            | <<83B8E368-0B1C-4682-AB2C-13AFCBD8F49A>> |
       | # |                                    | https://github.com/saltstack-formulas/nexus-formula                                      |                                                                                                                            | <<B614F14E-65D5-4020-917F-EE2AE05EE7EC>> |
       | # |                                    | https://github.com/saltstack-formulas/splunkforwarder-formula                            |                                                                                                                            | <<18130008-153F-497F-94F2-508BA8300C44>> |
       | # |                                    | https://github.com/saltstack-formulas/gitolite-formula                                   |                                                                                                                            | <<8C6803BC-D5BD-4AD7-8AE9-0906626A701B>> |
       | # |                                    | https://github.com/saltstack-formulas/reverse-users-formula                              |                                                                                                                            | <<A0974397-2FF5-45D1-ADD7-772B2B06C5AE>> |
       | # |                                    | https://github.com/saltstack-formulas/samba-formula                                      |                                                                                                                            | <<D9B10230-73E1-4F6A-B9FE-CA3D3203F765>> |
       | # |                                    | https://github.com/lextoumbourou/consul-formula                                          |                                                                                                                            | <<0A1C472C-D611-4461-83D2-7DA53381DFCA>> |
       | # | xenophonf/salt-master-bootstrap.sh | https://gist.github.com/xenophonf/d8da7f47ea29d9ad46e7                                   | Sample Salt master bootstrap script, leveraging gitfs and saltstack-formulas, including salt-formula (CentOS 7 on AWS EC2) | <<606FD848-F9CD-4E32-9CC7-E98A3AAFFD38>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Minimal Viable Master
       - install =salt-master= using relevant package manager 
       - install Saltstack's salt-formula to bootstrap the config of a master
         - requires the =gitfs_remote= config for =saltstack-formulas/salt-formula=
           #+BEGIN_EXAMPLE
             ## NOTES
             ##  - conf.master.gitfs_remotes..saltstack-formula-salt.conf
             gitfs_remotes:
               - https://github.com/saltstack-formulas/salt-formula:
                 - mountpoint: salt://config/formula/salt
                 - root: salt
     
           #+END_EXAMPLE
         - requires that the =fileserver=  be set to look at =gitfs=
           #+CAPTION: even in a gitfs-oriented setup, the option of local file-based override is nice
           #+BEGIN_EXAMPLE
             ## NOTES
             ##  - conf.master.fileserver_backend..roots-and-git.conf
             fileserver_backend:
               - roots
               - git
           #+END_EXAMPLE
       - requires that packages =git= and =python-pygit2= be installed on the system
         #+BEGIN_SRC bash
           sudo yum install git python-pygit2
         #+END_SRC
         - we're not able to use the formula w/o needed git pkgs
         - once setup, the formula verify a/o enforce this dependency
         - among the available python to git libraries, =python-pygit2= is the most preferred
     - on Scenario Deploy
       - (wip) vagrant test
         |   |                   |                                                        |   |   |
         |---+-------------------+--------------------------------------------------------+---+---|
         | / |                   |                                                        |   |   |
         |   | minimal-bootstrap | conf.master.fileserver_backend..roots-and-git.conf     |   |   |
         |   |                   | conf.master.gitfs_remotes..saltstack-formula-salt.conf |   |   |
         |   | minimal-provision |                                                        |   |   |
         |   |                   |                                                        |   |   |
         |   | testing           | conf.master.file_roots..genesisctl-vagrant.conf        |   |   |
         |   |                   | conf.master.pillar_roots..genesisctl-vagrant.conf      |   |   |

         - should be able to run
           #+BEGIN_SRC bash
             # accept key
             salt-key -Ay
             # install software pre-reqs
             salt salt-master-t1 state.single pkg.installed "" pkgs="[git,python-pygit2,salt-minion,salt-master]"
             # add bootstrap configs to /etc/salt/master.d if needed
             # restart salt-master, update file cache
             systemctl restart salt-master ; sleep 5 ; salt-run fileserver.update
             # apply formula-driven state
             salt salt-master-t1 state.sls salt.master
           #+END_SRC
         - nb, expect the master to need reboots after certain changes
         - after running =state.sls salt.master= the files originally in =master.d/.= dir were removed and new files added in place
         - during troubleshooting
           - add =gitfs_base: master=
           - remove =gitfs_mountpoint: salt://formula/salt=
           - remove =gitfs_root: salt=
         - these are all OK actually, it's more that the =salt-master= needs to be restarted on each significant change
         - the salt-formula cannot be relocated 
     - on Related Actions a/o Commands
       #+CAPTION: salt commands
       |   | cmd                                        | desc |
       |---+--------------------------------------------+------|
       | / |                                            |      |
       |   | salt-run fileserver.update                 |      |
       |   | salt-run fileserver.file_list              |      |
       |   | salt-run pillar.show_top                   |      |
       |   | salt-run pillar.show_pillar salt-master-t1 |      |
       |   | salt '*' saltutil.refresh_pillar           |      |
       |   | salt '*' pillar.items                      |      |
       |   |                                            |      |
   - Questions
   - log
     - [2016-03-19 Sat]
       - [2016-03-19 Sat 11:16] the formula works, but pillar data is not working which means that only the salt-formula defaults are enacted
       - NGa creates file =conf.master..scenario-genesis-vagrant.conf= to suppliment testing
       - [2016-03-19 Sat 12:37] NGa observes that several pillar_roots environment definitions reference 'BASE' when it should be 'base'. Changing this fixed the data lookup problems.
       - NGa works to migrate the configs in =conf.master..scenario-genesis-vagrant.conf= to the formula config in pillar =by_machine_role.salt-master=
       - [2016-03-19 Sat 15:43] initial migration ready to test
       - created personal fork of the =salt-formula= using jinja to enable the formula to work properly when located anywhere in the salt tree. This makes it possible to tidy up the inclusion of the formula by use of the =mountpoint= and =base= options.
       - [2016-03-19 Sat 18:04] NGa tests the rendering of individual states in the =salt-formula=, initial tests indicate OK
       - [2016-03-19 Sat 18:31] using =test=True= mode, the =formula.salt.master= state is now applying w/o error
       - 
 - procedure :: vagrant formula testing
   - start =salt-master-t1= and =sudo= to root
   - install pre-req software
     : yum install -y git python-pygit2
   - =cd= to =/etc/salt/master.d=
   - create the following symlinks
     |                                                                                |
     |--------------------------------------------------------------------------------|
     | /vagrant/etc/salt/conf.d/conf.master.fileserver_backend..roots-and-git.conf    |
     | /vagrant/etc/salt/conf.d/conf.master.gitfs_remote..saltstack-formula-salt.conf |
     | /vagrant/etc/salt/conf.d/conf.master.pillar_roots..genesisctl-vagrant.conf     |
   - verify the =salt-formula= is in place
     #+BEGIN_SRC bash
       salt-run fileserver.update
       salt-run fileserver.file_list
     #+END_SRC
   - verify the pillar data is in place
     #+BEGIN_SRC bash
       salt-run pillar.show_top
     #+END_SRC
** on Salt Pillar
:PROPERTIES:
:ID: 41C783DD-358D-4B0A-81F5-5785F2C3A322
:END:
[2016-03-19 Sat 20:22]
[[git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-19}::1374][git:~/.vault/uris/genesis-ctl/ReadMe-Genesis.org::master@{2016-03-19}::1374]]
 - context ::
   - [/] overview
   - info/notes
     - srcs
       #+NAME: 41C783DD-358D-4B0A-81F5-5785F2C3A322-srcs
       #+CAPTION: reference list
       | ! | title                      | url                                                                                     | desc                        | rowid   |
       |   | title                      | url                                                                                     | desc                        | rowid   |
       |---+----------------------------+-----------------------------------------------------------------------------------------+-----------------------------+---------|
       | / |                            |                                                                                         |                             | <7>     |
       | # |                            | https://docs.saltstack.com/en/latest/topics/tutorials/pillar.html                       |                             | <<B86922A4-0CC4-4899-9C45-D99D7F4392C2>> |
       | # |                            | https://docs.saltstack.com/en/latest/topics/pillar/                                     |                             | <<86B6B9E6-1B4E-4C27-B125-D95FC829E651>> |
       | # |                            | https://docs.saltstack.com/en/latest/ref/configuration/master.html#pillar-configuration |                             | <<0C0085D4-3D04-44AB-8645-182D4E5FE1A3>> |
       | # |                            | https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.pillar.html           |                             | <<F608E9AA-E7DB-4D67-9A3B-729F1E11F938>> |
       | # |                            | https://docs.saltstack.com/en/latest/ref/pillar/all/salt.pillar.pillar_ldap.html        |                             | <<F143A271-5EF9-41CC-B2F7-FA1949755AA4>> |
       | # |                            | https://docs.saltstack.com/en/latest/ref/pillar/all/salt.pillar.consul_pillar.html      |                             | <<BD275EFC-95AE-42DF-9609-C6E3F4575CE0>> |
       | # |                            | https://docs.saltstack.com/en/latest/ref/runners/all/salt.runners.pillar.html           |                             | <<509D9D55-11A6-4672-9089-6DA8BFC58AD2>> |
       | # | irtnog/salt-pillar-example | https://github.com/irtnog/salt-pillar-example                                           | IRTNOG Salt Pillar Examples | <<C14B18BF-4214-4F30-B3D6-9EAB538E07B9>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
   - Questions
   - log
** on Salt Cloud
*** howto, manage Cloud Infrastructure w/ Salt
 - context ::
   - info/notes
     - srcs
       - http://docs.saltstack.com/en/latest/ref/clouds/all/salt.cloud.clouds.vsphere.html
         - http://salt-cloud.readthedocs.org/en/latest/index.html
         - http://docs.saltstack.com/en/latest/topics/cloud/
         - http://salt-cloud.readthedocs.org/en/latest/ref/cli/salt-cloud.html
     - on Initial Understanding a/o Discovery
       - Pre-Requisites and Assumptions
         - VMware vCSA
         - =salt-cloud= configured to connect to your vCSA
     - on using =salt-cloud=
       - enter the venv, =workon salt-vcenter=, (in this example)
       - salt cloud function call template
         : salt-cloud -c ./etc/salt -f <function_name> <provider_name> [<addl_fn_keyval_args>,...]
     - on =salt-cloud='s =vsphere= functions
       #+CAPTION: functions available to salt.cloud.clouds.vsphere
       | # | fn_name                                    | fn_args | cli_example | works? | desc                | example inv.                                                    |
       |---+--------------------------------------------+---------+-------------+--------+---------------------+-----------------------------------------------------------------|
       | / |                                            |         |             |        |                     |                                                                 |
       | # | avail_images()                             |         |             | NO     |                     |                                                                 |
       | # | avail_locations(vm_)                       |         |             | NO     |                     |                                                                 |
       | # | create(vm_)                                |         |             | NO     |                     |                                                                 |
       | # | destroy(name, call=None)                   |         |             | NO     |                     |                                                                 |
       | # | get_configured_provider()                  |         |             | NO     |                     |                                                                 |
       | # | get_conn()                                 |         |             | NO     |                     |                                                                 |
       | # | list_clusters(kwargs=None, call=None)      |         |             | YES    |                     |                                                                 |
       | # | list_datacenters(kwargs=None, call=None)   |         |             | YES    |                     |                                                                 |
       | # | list_datastores(kwargs=None, call=None)    |         |             | YES    |                     | salt-cloud -c ./etc/salt -f list_hosts vsphere_Alphacloud         |
       | # | list_folders(kwargs=None, call=None)       |         |             | YES    |                     |                                                                 |
       | # | list_hosts(kwargs=None, call=None)         |         |             | YES    |                     |                                                                 |
       | # | list-image                                 |         |             | YES    | lists OVF templates | salt-cloud -c ./etc/salt --list-image=<providername -or- all>   |
       | # | list_nodes(kwargs=None, call=None)         |         |             | NO     |                     |                                                                 |
       | # | list_nodes_full(kwargs=None, call=None)    |         |             | NO     |                     |                                                                 |
       | # | list_nodes_min(kwargs=None, call=None)     |         |             | NO     |                     |                                                                 |
       | # | list_nodes_select(kwargs=None, call=None)  |         |             | NO     |                     |                                                                 |
       | # | list_resourcepools(kwargs=None, call=None) |         |             | YES    |                     | salt-cloud -c ./etc/salt -f list_resourcepools vsphere_Alphacloud |
       | # | script(vm_)                                |         |             | ?      |                     |                                                                 |
       | # | show_instance(name, call=None)             |         |             | ?      |                     |                                                                 |
       | # | wait_for_ip(vm_)                           |         |             | NO     |                     |                                                                 |
       - on VMware VM Lifecycle management
         - what Salt refers to as an image includes:
           - OVF's (which may be easily created from VMs)
           - 
 - procedure :: setup a/o configure =salt-cloud= to connect to vCSA (on Debian)
   - nb
   - install salt-cloud
     : sudo aptitude install salt-cloud
   - create a python venv
 - procedure :: use salt to admin VMware
   - create dir and file at [[/etc/salt/cloud.providers.d/vsphere.conf]]
   - verify required python module, =pysphere= is installed. The below should return =0=. Create a virtualenv is needed.
     : python -c "import pysphere" ; echo $?
   - verify the =salt-ssh= user matches to the configured =user= in =salt-master=
   - verify the =salt-cloud= package is installed, else install it as below:
     : sudo aptitude install salt-cloud
   - to test, (w/i the venv w/ =pysphere=)
     : salt-cloud -c ./etc/salt -Q
     - on success, returns a bunch of info on associated VMs
 - procedure :: create VMs on VMware w/ =salt-cloud=
   - nb
     - creating VMs looks to require a base image, unfortunately
   - create and  machine profile called 'Alphacloud_demovm'
   - create a new vm called 'new_vm_name' using the 'Alphacloud_demovm' profile
     : salt-cloud ./etc/salt -p Alphacloud_demovm new_vm_name
 - procedure :: send control actions, (such as reboot, etc) to VMs using =salt-cloud=
   - reboot one or more VMs
     : salt-cloud -a reboot vm1 vm2 vm2
 - procedure :: get VM names a/o details
   - using unqualified query
     : salt-cloud ./etc/salt -Q
 - procedure :: delete VM on VMware w/ =salt-cloud=
   - substitute the VM's id in place of 'name_of_vm'
     : salt-cloud -d name_of_vm
 - procedure :: (wip) howto, provision ESXi/vCSA Linux VMs using =salt-cloud=
   - nb
     - pre-requisite, configure =salt-cloud= to be able to communicate with your vCSA ([[id:c9eea510-5136-4981-9e89-bdc97d4f0b9a][orgid]])

*** howto, manage VMware w/ Python and PySphere
:PROPERTIES:
:ID:       c9eea510-5136-4981-9e89-bdc97d4f0b9a
:END:
 - context :: 
   - [0/1] overview
     - [ ] document basic config requirements
   - info/notes
     - srcs
       - https://code.google.com/p/pysphere/wiki/GettingStarted
       - https://dellaert.org/2013/03/04/pysphere-script-to-clone-a-template-into-multiple-vms-with-post-processing/
     - on using pysphere module
       - see 'howto, connect to VMware w/ PySphere'
       - use the vCSA creds and the url, https://prototypeAlphaBORON.acme.co.uk:443/sdk
     - on the Different Types of Cloning
       #+CAPTION: Which 'clone' operations require the Resource Pool 
       |   | from     | to       | rescpool? | desc                                         |
       |---+----------+----------+-----------+----------------------------------------------|
       |   | VM       | VM       | optional  | (when unset, defaults to 'src' VMs rescpool) |
       |   | VM       | Template | ignored   |                                              |
       |   | Template | Template | ignored   |                                              |
       |   | Template | VM       | required  |                                              |
   - Questions
     - Q: is the Pysphere module avaiable via a Debian package
       - perhaps using the =python-psphere=, =python-pyvmomi=, or it's ilk
     - Q: why isn't =salt-cloud='s vsphere integration working
       - the virtualenv/pip installed 'pysphere' module isn't being loaded by python for some reason
       - vsphere.py is only in [[/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vsphere.py]] which isnt in most python module lookup paths
       - to test, I'll add the dir to the =salt-cloud= invocation as below
         : env PYTHONPATH="${VIRTUAL_ENV}/lib/python2.7/site-packages" salt-cloud -c ./etc/salt/ -p Alphacloud -Q
       - A: the 'pysphere' module didn't load because it was not in the module lookup path. To fix, create venv's as below:
         : mkvirtualenv VIRTUAL_ENV  to the =$PYTHONPATH= in the venv
         - to ensure that pip-installed packages are properly available
         - To fix in be resolved =pip=-installed package's path to the =$PYTHONPATH= in the venv so that the
   - log
     - [2014-12-01 Mon]
       - req'd module, =pysphere= not pre-installed or available in debian repos
       - for my purposes, I'm going to add it to a venv during testing
       - to this end, I'm installing =virtualenvwrapper= and creating
         the venv as below
         #+BEGIN_EXAMPLE
         mkvirtualenv --system-site-packages salt-vcenter
         pip -U pysphere
         #+END_EXAMPLE
       - installed =salt-cloud= and upgraded =salt-ssh= from =experimental= repo
     - [2015-02-04 Wed]
       - able to connect to and query Boron using pysphere in an
         interprative python shell by creating a virtualenv and
         following the guide at
         https://code.google.com/p/pysphere/wiki/GettingStarted
 - procedure :: create virtualenv for VMware integration with Salt
   - one shot command (untested)
     : mkvirtualenv --system-site-packages -i pysphere salt-vsphere
   - *OR* a multi-step setup
     - create the named virtualenv
       : mkvirtualenv salt-vsphere
     - enable site packages by toggling to 'active'
       : toggleglobalsitepackages
     - install pysphere
       : pip install -U pysphere
     - (from w/i the venv) ensure the venv site-packages path is in =$PYTHONPATH=
       : export PYTHONPATH="${VIRTUAL_ENV}/lib/python2.7/site-packages"
       *OR* 
       : add2virtualenv "${VIRTUAL_ENV}/lib/python2.7/site-packages"
 - procedure :: fix, EM: "Failed to ... global name 'VIServer' is not defined"
   - nb,
     - this error indicates that the python module =pysphere= is not available
     - req'd module, =pysphere= not pre-installed or available in debian repos
     - for my purposes, I'm going to add it to a venv during testing
     - to this end, I'm installing =virtualenvwrapper= and creating
       the venv as below
   - install =pysphere= python module
     #+BEGIN_EXAMPLE
     mkvirtualenv --system-site-packages salt-vcenter
     pip -U pysphere
     #+END_EXAMPLE
   - add the venv's site-packages path to the =$PYTHONPATH=, (ex. below)
     : export PYTHONPATH="${VIRTUAL_ENV}/lib/python2.7/site-packages:${PYTHONPATH}"
     - ya, seems like this should be happening automatically don'it
 - procedure :: howto, connect to VMware w/ PySphere (for interactive a/o testing uses)
   - nb
     - req's v5+ vCSA (ex. boron) *OR* a ESXi server w/ API features (w/ applicable license)
     - the server connection seems to timeout after some time
   - create a Salt-VMware integration virtualenv, (see procedure below)
   - open interactive python shell
   - import the module
     : from pysphere import VIServer
   - create a =VIServer= object
     : server = VIServer()
   - establish a connection using the object
     : server.connect("https://prototypeAlphaBORON.acme.co.uk:443/sdk", "root", '''<redacted>'')
 - procedure :: howto, query VMware resources w/ PySphere
   - on BORON, all VMs and Hosts are queriable
   - list all VMs
     : server.get_registered_vms()
   - create a object representing a VM
     : vm01 = server.get_vm_by_name("Windows XP Professional")
     or
     : vm1 = server.get_vm_by_path("[DataStore1] Ubuntu/Ubuntu-10.vmx")
     or
     : vm1 = server.get_vm_by_path(server.get_registered_vms()[0])
   - get VM info via object
     : print vm01.get_status()
     or 
     : print vm01.get_properties()
   - get Templates info
     - list all templates
       #+BEGIN_SRC python
       from pysphere import VIServe

       s = VIServer()
       s.connect(HOST, USER, PASSWORD)

       template_list = s.get_registered_vms(advanced_filters={'config.template':True})

       # If you want to get the properties of each (for example) you can do:

       for t in template_list:
       vm = s.get_vm_by_path(t)
       prop = vm.get_properties()
       print(prop['name'])       

       #+END_SRC
   - get VM resource pool name 
     : print vm1.get_resource_pool_name()
   - to disconnect from server
     : server.disconnect()
   - more info here: https://code.google.com/p/pysphere/wiki/GettingStarted
 - procedure :: howto, manipulate VMware resources w/ PySphere
   - manipulate VMs power-state
     - guest view
       #+BEGIN_SRC python
       vm1.shutdown_guest()
       vm1.reboot_guest()
       vm1.standby_guest()
       #+END_SRC
     - host-view
       #+BEGIN_SRC python
       # create VM object
       vm1 = server.get_vm_by_path(server.get_registered_vms()[0])

       # Power On
       >>> vm1.power_on()

       # as w/ all of these command, the ~sync_run=False~ argument can be provided to make the call non-blocking
       # the call returns a 'task' object, which can be used to query the state of the call
       # Async Power On
       >>> task1 = vm1.power_on(sync_run=False)

       # Restart, (VM must already be 'Powered On')
       >>> vm1.reset()

       # Suspend
       >>> vm1.suspend() #since pysphere 0.1.5

       # Power Off
       >>> vm1.power_off()           

       #+END_SRC
   - manipulate VM snapshots
     - list snapshots
       #+BEGIN_SRC python
       snapshot_list = vm2.get_snapshots()             

       # BTW
       for snapshot in snapshot_list:
          print "Name:", snapshot.get_name()
          print "Description", snapshot.get_description()
          print "Created:", snapshot.get_create_time()
          print "State:", snapshot.get_state()
          print "Path:", snapshot.get_path()
          print "Parent:", snapshot.get_parent()
          print "Children:", snapshot.get_children()

       #+END_SRC
              
       #+CAPTION: expect output of a similar form
       #+BEGIN_QUOTE
       """
       Name: base_old
       Description:
       Created: (2008, 7, 30, 18, 0, 17, 54, 0, 0)
       State: poweredOn
       Path: /base_old
       Parent: None
       Children: [<pysphere.vi_snapshot.VISnapshot instance at 0x052448A0>]
       Name: base
       Description: With Service Pack 2
       Created: (2011, 9, 28, 11, 9, 36, 165, 0, 0)
       State: poweredOn
       Path: /base_old/base
       Parent: <pysphere.vi_snapshot.VISnapshot instance at 0x05244738>
       Children: []
       """
       #+END_QUOTE
     - to create a snapshot
       #+BEGIN_SRC python

         # create snapshot called "mysnapshot"
         vm1.create_snapshot("mysnapshot")

         # asynchronously start creation of snapshot "mysnapshot", return task
         #  object to variable 'task1' to monitor state a/o progress
         task1 = vm1.create_snapshot("mysnapshot", sync_run=False)

         # same as above, but quite memory first, for a safer and more consistent snapshot
         vm1.create_snapshot("fastsnapshot", memory=False, quiesce=False)

       #+END_SRC
   - manipulate VM templates
     - list all VM templates (aka "Images")
       - from https://groups.google.com/forum/#!searchin/pysphere/template/pysphere/o9RHp8fD0y0/OA0vIqZ-M-gJ
         #+CAPTION: Example 1: A way to find all the VMs that are templates
         #+BEGIN_SRC python
         from pysphere import VIServer, MORTypes
         from pysphere.vi_virtual_machine import VIVirtualMachine
               
         s = VIServer()
         s.connect(HOST, USER, PASSWORD)
               
         props = s._retrieve_properties_traversal(property_names=['name', 'config.template'], 
                                                  from_node=None, obj_type=MORTypes.VirtualMachine)
               
               
         for p in props:
             mor = p.Obj
             name = ""
             is_template = False
             for item in p.PropSet:
                 if item.Name == "name": name = item.Val
                 elif item.Name == "config.template": is_template = item.Val
             if is_template: print "MOR:", mor, " - Name:", name
                   
         #MIGHT PRINT SOMETHING LIKE:
         #MOR: vm-11212  - Name: Gentoo 2012.1 clean
         #MOR: vm-6869  - Name: Windows 2000 Professional
         #MOR: vm-6201  - Name: Windows 2003 Enterprise Edition SP1
         #MOR: vm-6286  - Name: Windows 2003 Enterprise Edition SP2
         #MOR: vm-6705  - Name: Windows Server 2008 SP1 Enterprise Edition
         #MOR: vm-11327  - Name: Windows Vista Ultimate SP0 (SP1 , SP2)
         #MOR: vm-3180  - Name: Windows Vista Ultimate SP0 (Solo para SP0)
         #MOR: vm-2963  - Name: Windows XP Profesional SP3
               
               

         #+END_SRC
         This can be much easier you know the Template's name as you mentioned
               
         #+CAPTION: Example 2: Cloning from a template
         #+BEGIN_SRC python
         all_vms =  s._get_managed_objects(MORTypes.VirtualMachine, from_mor=None)
         #you can filter from cluster, datacenter, host, etc by setting
         #'from_mor' parameter to a managed object reference
               
         vm = None
         target_name = "My Template Name"
               
         for mor, name in all_vms.iteritems():
             if name == target_name:
                 vm = VIVirtualMachine(s, mor)
                 break
                   
         if not vm:
             raise Exception("VM Template Not found")
               
         print vm.properties.config.template
               
         new_vm = vm.clone("The New deployed VM Name", ... rest of the parameters...) 
               
         #I think is mandatory to provide the 'resourcepool' parameter to the clone
         #method when cloning from a template, the value you need to pass is the
         #MOR of the resource pool where you want to place the VM.
         # you can get those MORs from the keys of the dictionary returned by
         # s.get_resource_pools()

               
         #+END_SRC
   - manipulate VM files and dirs, (req's auth to guest)
     - requires that the guest OS have VMware Tools installed, does not require network access to the guest OS
     - Q: does this require the Guest OS to be network accessible or does it perhaps work as if from the Guest's console
       - tested on a guest VM w/ no network connection
       - A: No guest-accessible network is required. This can be thought of as acting at the local console. (tested w/ Linux guest)
     - first, login to guest OS
       #+BEGIN_SRC python
       vm2.login_in_guest("admin", "secret")             
             
       #+END_SRC
     - and then, go nuts
       #+CAPTION: relevant function signatures
       #+BEGIN_QUOTE
       make_directory(path, create_parents=True): Creates a directory in the guest OS specified by path, if create_parents is True (default) all the directory components in the path are created if they don't exist.
       #+END_QUOTE
       #+BEGIN_QUOTE
       move_directory(src_path, dst_path): Moves or renames a directory in the guest system from src_path to dst_path.
       #+END_QUOTE
       #+BEGIN_QUOTE
       delete_directory(path, recursive): Deletes the directory specified by path in the guest OS. If recursive is True all subdirectories and files are also deleted, else the operation will fail if the directory is not empty.
       #+END_QUOTE
       #+BEGIN_QUOTE
       list_files(path, match_pattern=None): Returns information about files or directories from the guest system. path is the complete path to the directory or file to query. match_pattern is a filter for the return values specified as a perl-compatible regular expression (if not provided then '.' is used). The method returns a list of dictionaries with these keys:
           path: The complete path to the file
           size: The file size in bytes
           type: either 'directory', 'file', or 'symlink' 
       #+END_QUOTE
       #+BEGIN_QUOTE
       get_file(guest_path, local_path, overwrite=False): Downloads a file from the guest to the system running pysphere.
       #+END_QUOTE
       #+BEGIN_QUOTE
       send_file(local_path, guest_path, overwrite=False): Uploads a file from the system running pysphere to the guest system.
       #+END_QUOTE
       #+BEGIN_QUOTE
       move_file(src_path, dst_path, overwrite=False): Renames a file in the guest system from src_path to dst_path. If overwrite is False (default) and dst_path already exists the method fails, while if overwrite is set to True clobbers any existing file.
       #+END_QUOTE
       #+BEGIN_QUOTE
       delete_file(path): Deletes the file specified by path from the guest system. 
       #+END_QUOTE


       #+CAPTION: some examples
       #+BEGIN_SRC python
             
       #
       vm2.login_in_guest("admin", "secret")

       #
       vm2.send_file("/home/seba/netcat.exe", r"c:\netcat.exe")

       #
       vm2.make_directory(r"c:\my\binary\tools")

       #
       vm2.move_file(r"c:\netcat.exe", r"c:\my\binary\tools\nc.exe")

       #
       for f in vm2.list_files(r"c:\my\binary\tools"):
          print "'%s' is a %s of %s bytes." % (f['path'], f['type'], f['size'])

       # output
       #          '.' is a direcotory of None bytes.
       #          '..' is a directory of None bytes.
       #          'nc.exe' is a file of 1258291 bytes.

       #
       vm2.delete_directory(r"c:\my", True)             

       #+END_SRC
   - manipulate VM processes
     - execute process
       #+BEGIN_SRC python
       #
       pid = vm.start_process('/usr/bin/ifconfig', ['eth0', '10.10.10.10/24'])             

       #+END_SRC
       - Be mindful that process output is not returned via start_process.
       - Where significant you're advised to redirect to a file,
         then read the contents of that file (by pulling the
         file with =vm.get_file()=), as needed
   - manipulate VM life-cycle (create, clone, destroy, etc)
     - nb
       - (editorial) I was hoping for the ability to create (from:
         args, template, etc), clone, and delete VMs but, (as of
         [2015-02-13 Fri]).
       - I see a facility for a =clone=, and a =migrate=
         function. Hopefully it's buried in the code somewhere.
     - (untested) create new VM, (must provide Resource Group?)
       #+BEGIN_SRC python
         from pyspere import VIServer, MORTypes

         s = VIServer()
         s.connect(HOST, USER, PASSWORD)

         destination_folder = "Automation"
         destination_mor = None

         # get all folders, returns a dictionary where keys are managed object
         #  references (MORS) and values are the folder names
         folders = s._get_managed_objects(MORTypes.Folder)

         #Iterate through all folders looking for the "Automation" folder
         for mor, folder_name in folders.items():
             print "Folder: %s (%s)"% (folder_name, mor)
             if folder_name == destination_folder:
                 destination_mor = mor

         # ... rest of the script ...

         folder_mor = create_vm_request.new__this(destination_mor) 
         folder_mor.set_attribute_type(destination_mor.get_attribute_type()) 
         create_vm_request.set_element__this(folder_mor) 

       #+END_SRC
     - (untested) create linked clone VM
       #+BEGIN_SRC python
       vm = server.get_vm_by_path("[datastore] path/to/config.vmx")
       snapshot = vm.get_snapshots()[0]

       vm2 = vm.clone("new vm", snapshot=snapshot, linked=True)       
       #+END_SRC
     - clone a VM
       - (nb) perhaps this could be used to clone from templates and subsequently configured a/o customized via the console-oriented guest OS file manip


