#+SETUPFILE: ~/.vault/cfgs/org-central/org-setupfile
#+TITLE: notes on Genesis // INSTALL

* synopsis
 - GeMa is a convenience and collaboration layer on top of a few existing tools: Salt, Vagrant, Packer, Git.
 - This setup/install documentation is mostly concerned with getting these tools.
* chapters
** howto, Initial GeMa Setup on MacOSX
:PROPERTIES:
:ID:       931F5DDD-FB89-4FE8-9203-DB63F78E654F
:END:
 - context ::
   - info/notes
     - on Initial Understanding a/o Discovery
       - This document describes the GeMa setup process by breaking it into three parts.
       - There is some flexibility and variability by design but it's mostly ignored here in favor of clear instructions with predicatble outcomes.
     - on =genesis-ctl= Setup Requirements
       - install of support tools
       - install a hypervisor (including management and integration software)
       - clone GeMa
   - log
     - [2016-12-30 Fri] feedback from field trial
       - [ ] switch the submodules from ssh to https, github does not do this for you automatically
       - [ ] dont provide install instructions for brew, only include a reference to the brew project
       - [ ] remove reference to =xcode=, apparently it's installed by default as of [2016-12-15 Thu]
       - [ ] remove duplicate instructions: =echo vagrant vagrant-manager virtualbox |xargs -n1 brew cask install -y=
       - EM: "VMware Fusion must be set-UID root, "vmware-vmx" is not"
         #+BEGIN_EXAMPLE
           MacBook-Pro:gema-ctl ngarber$ vmware-vmx
   
           VMware Fusion Error:
           VMware Fusion must be set-UID root, "vmware-vmx" is not. Are you running vmware-vmx from its distribution directory? That copy of the program is not set-UID root.
   
         #+END_EXAMPLE
         #+BEGIN_EXAMPLE
           MacBook-Pro:gema-ctl ngarber$ ls -l "$(readlink $(which vmware-vmx))"
           -rwxr-xr-x  1 ngarber  staff  24266880 Nov 24 21:57 /Applications/VMware Fusion.app/Contents/Library/vmware-vmx
           MacBook-Pro:gema-ctl ngarber$ echo "$(readlink $(which vmware-vmx))"
           /Applications/VMware Fusion.app/Contents/Library/vmware-vmx
           MacBook-Pro:gema-ctl ngarber$ sudo chown root "$(readlink $(which vmware-vmx))" && sudo chmod u+s "$(readlink $(which vmware-vmx))"
           Password:
           MacBook-Pro:gema-ctl ngarber$ 
         #+END_EXAMPLE
         - Q: does this need to be changed?
   
         - after install, the user will need to locate the VMware Fusion app in the "Application Launcher"'s menu. Click on it and it will prompt you to step through the intial config process
       - open the VMware Fusion desktop application, enter your credentials a/o license key when prompted
         - the error message below may indicate that VMware Fusion is not fully installed/initiallize, (potentially b/c the license wasn't entered)
           : "Error starting VM: VMware error: Error: vmrun was unable to start. Please make sure that vmrun is installed correctly and that you have enough resources available on your system."
       - to be able to use the sshkey in the yubikey, enter this in a shell first: =eval $(gpg-agent --daemon --enable-ssh-support --sh)=

 - procedure :: install support tools
   - install =xcode-select --install=
     #+BEGIN_SRC bash
     xcode-select --install
     #+END_SRC
   - use =brew=
     #+BEGIN_SRC bash :results drawer :wrap example
     which brew || /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
     echo bash git gnu-sed gnupg2 gpg-agent jq packer pinentry pinentry-mac python remake remarshal |xargs -n1 brew install -y 
     echo vagrant vagrant-manager virtualbox |xargs -n1 brew cask install -y
     pip install --user invoke
     #+END_SRC

 - procedure :: install hypervisor
   - nb,
     - Virtualbox is supported
     - VMware Fusion (proprietary, paid software) is the recommended hypervisor for use on MacOSX
   - install virtualbox hypervisor and related tools
     #+BEGIN_SRC bash :results drawer :wrap EXAMPLE
     echo vagrant{,-manager} virtualbox |xargs -n1 brew cask install -y
     echo landrush vagrant-triggers |xargs -n1 vagrant plugin install 
     #+END_SRC

     #+RESULTS:
     #+BEGIN_EXAMPLE
     Installing the 'landrush' plugin. This can take a few minutes...
     Installed the plugin 'landrush (1.1.2)'!
     Installing the 'vagrant-triggers' plugin. This can take a few minutes...
     Installed the plugin 'vagrant-triggers (0.5.3)'!
     #+END_EXAMPLE

   - (opt.) when using VMware Fusion, install the App (out of scope for this document), the license, and the plugin in place
     #+BEGIN_SRC bash :results drawer :wrap EXAMPLE
     echo vmware-fusion |xargs -n1 brew cask install 
     echo vagrant-vmware-fusion |xargs -n1 vagrant plugin install 
     vagrant plugin license vagrant-vmware-fusion ~/path/to/vagrant-plugin-vmware-fusion-license                                                           
     #+END_SRC

     #+RESULTS:
     #+BEGIN_EXAMPLE
     Installing the 'vagrant-vmware-fusion' plugin. This can take a few minutes...
     Installed the plugin 'vagrant-vmware-fusion (4.0.15)'!
     Installing license for 'vagrant-vmware-fusion'...
     The license for 'vagrant-vmware-fusion' was successfully installed!
     #+END_EXAMPLE

 - procedure :: install GeMa software
   - clone and enter the genesis-ctl directory and display genesis-matrix help info
     #+BEGIN_SRC bash :results drawer :wrap EXAMPLE
     cd $(mktemp -d)
     git clone --recursive https://github.com/genesis-matrix/genesis-ctl.git && make
     #+END_SRC

     #+RESULTS:

   - (opt.) add'l information and test
     #+BEGIN_SRC bash
     make # should display genesis-matrix help info
     make help-commands |& less # view listing of available commands
     vagrant status # list VMs included in current scene
     #+END_SRC

 - procedure :: (opt.) setup resolver from host to Vagrant guests
   - nb
     - manual setup shouldn't be needed since =landrush= offers to setup this up
   - add file at =/etc/resolver/vagrant.test= w/ the content below:
     #+BEGIN_EXAMPLE
       # Generated by landrush, a vagrant plugin
       nameserver 127.0.0.1
       port 10053
     #+END_EXAMPLE


** (wip) howto, Initial GeMa Setup on Linux
:PROPERTIES:
:ID:       F5223C98-8573-4B69-8043-A285F37C02BC
:END:
 - context ::
   - [0/0] overview
     - use the distro package manager, else the upstream project's install package and instruction
   - info/notes
 - procedure :: from the command line
   - install software pre-requisites: git, vagrant, packer, gnu make
     - (alt.) for Fedora 22+
       #+BEGIN_SRC bash
       sudo dnf install -y git make jq unzip 
       # install vagrant
       sudo dnf install -y vagrant
       # .. install vagrant plugins
       echo landrush vagrant-triggers | xargs -n1 vagrant plugin install
       # install packer
       export uri_packer="https://releases.hashicorp.com/packer/0.10.1/packer_0.10.1_linux_amd64.zip"
       cd $(mktemp -d) && curl -O ${uri_packer} && unzip $(basename ${uri_packer}) && mv packer /usr/local/bin
       # virtualbox
       sudo curl http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo -o /etc/yum.repo.d/virtualbox.repo
       # .. accept the repo's Oracle/Virtualbox PGP signing key
       sudo dnf install -y kernel-devel libvirt
       sudo dnf install -y VirtualBox-5.0 # as of [2016-08-20 Sat], vbox version 5.1 is available but not yet supported by the repo-provided vagrant (v1.8.1) 
       # .. run the config script, (just in case its needed)
       sudo /sbin/vboxconfig
       #+END_SRC
   - (opt.) install additional software
     - (alt.) for Fedora 22+
       #+BEGIN_SRC bash
       
       #+END_SRC
   - clone and enter the genesis-ctl repo
     #+BEGIN_SRC bash
       git clone --recursive https://github.com/genesis-matrix/genesis-ctl.git && cd genesis-ctl
     #+END_SRC
   - 
 - procedure :: using snap package
   - [2016-08-20 Sat] https://www.linuxbabe.com/desktop-linux/install-snap-packages-arch-linux-fedora-debian
     #+BEGIN_EXAMPLE
       Install snapd on Fedora 23/24
       Enable the copr zyga/snapcore repository.

       sudo dnf copr enable zyga/snapcore
       Then install snapd

       sudo dnf install snapd
       Start and enable the snapd systemd service:

       sudo systemctl start snapd.service
       sudo systemctl enable snapd.service
       On Fedora 24, you have to set permissive as the SELinux security policy to allow starting the snapd service. So letâ€™s edit the SELinux config file.

       sudo nano /etc/selinux/config
       Change the security policy from enforcing to permissive.

       SELINUX=permissive
       Save and close the file. Now you can start snapd service with systemctl.
     #+END_EXAMPLE
** (wip) howto, Initial GeMa Setup on Windows
 - procedure :: use =chocolately=
 - procedure :: (wip) use Windows Subsystem for Linux
   - nb
     - WSL doesn't provide =/dev/vboxdrv=, until it does virtualbox wont work
   - install, setup and enter WSL
   - install software pre-reqs
     #+BEGIN_SRC bash
     # enter a root shell
     sudo -s
     # install salt-minion to assist w/ this process
     apt install -y salt-minion
     # install more up to date software sources, (14.04's versions of some packages will be out of date)
     salt-call --local state.single pkgrepo.managed "deb https://repo.saltstack.com/apt/ubuntu/14.04/amd64/latest trusty main" file="/etc/apt/sources.list.d/saltstack.list" key_url="https://repo.saltstack.com/apt/ubuntu/14.04/amd64/latest/SALTSTACK-GPG-KEY.pub"
     # upgrade salt-minion
     salt-call --local state.single pkg.latest salt-minion refresh=True
     # upgrade all packages
     salt-call --local state.single pkg.uptodate "" refresh=True
     # install pre-reqs
     salt-call --local state.single pkg.installed "" pkgs='["git", "make", "vagrant", "salt-ssh", "salt-minion", "unzip", "virtualbox", "virtualbox-guest-additions-iso", "virtualbox-guest-dkms"]' refresh=True
     # install packer
     salt-call --local state.single cmd.run name='uri_tmpfile=$(mktemp) && cd $(mktemp -d) && curl -qsLo ${uri_tmpfile} https://releases.hashicorp.com/packer/0.10.1/packer_0.10.1_linux_amd64.zip && unzip ${uri_tmpfile} && cp packer -t /usr/bin/' unless='which packer'
     #+END_SRC

