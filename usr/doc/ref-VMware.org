# -*- mode: org -*-
#+SETUPFILE: ~/.vault/cfgs/org-central/org-setupfile
#+TITLE: notes on Genesis Matrix // VMware

* synopsis
* advisement
 - by [2016-02-06 Sat], the =PySphere= module is deprecated in favor of the =pyvmomi= module
* chapters
** howto, Setup ESXi as Vagrant guest box
:PROPERTIES:
:ID: 8ADA316B-81BF-4A19-B0DC-9A0D2F3170A8
:END:
[2016-06-20 Mon 14:14]
[[git:~/.vault/uris/genesis-ctl/usr/doc/ref-VMware.org::master@{2016-06-20}::13][git:~/.vault/uris/genesis-ctl/usr/doc/ref-VMware.org::master@{2016-06-20}::13]]
 - context ::
   - [/] overview
   - info/notes
     - srcs
       #+NAME: 8ADA316B-81BF-4A19-B0DC-9A0D2F3170A8-srcs
       #+CAPTION: reference list
       | ! | title | url                                                                        | desc | rowid   |
       |   | title | url                                                                        | desc | rowid   |
       |---+-------+----------------------------------------------------------------------------+------+---------|
       | / |       |                                                                            |      | <7>     |
       | # |       | https://github.com/dougm/packer-esxi                                       |      | <<8AF16F86-765C-47AA-BCEA-89483EABBAF9>> |
       | # |       | http://gosddc.com/articles/next-gen-vmware-automated-lab-esxi-with-packer/ |      | <<13B8F8D2-0B9D-4E45-866B-9776A460018C>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
   - Questions
   - log

** fix, 'packages.vmware.com' cert not trusted w/ older or absent ca-cert stores
:PROPERTIES:
:ID: C39E5722-6112-44ED-9349-68FF10018132
:END:
:LOGBOOK:
:END:
 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: C39E5722-6112-44ED-9349-68FF10018132-srcs
       #+CAPTION: reference list
       | ! | title | url                                                 | desc | rowid   |
       |   | title | url                                                 | desc | rowid   |
       |---+-------+-----------------------------------------------------+------+---------|
       | / |       |                                                     |      | <7>     |
       | # |       | https://www.packer.io/docs/builders/vmware-iso.html |      | <<134313B8-23E3-4D4F-ADBE-6D0BC11A169E>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
       - [2016-02-15 Mon 12:53] snippet
         #+NAME: 60A618C6-4A58-487E-AF52-4C98C39D7DDB
         #+CAPTION: openssl s_client -connect packages.vmware.com:443
         #+BEGIN_EXAMPLE
           CONNECTED(00000003)
           depth=2 C = IE, O = Baltimore, OU = CyberTrust, CN = Baltimore CyberTrust Root
           verify error:num=20:unable to get local issuer certificate
           verify return:0
           ---
           Certificate chain
            0 s:/C=US/ST=CA/L=Palo Alto/O=VMware Inc./OU=IT Operations/CN=*.vmware.com
              i:/C=NL/L=Amsterdam/O=Verizon Enterprise Solutions/OU=Cybertrust/CN=Verizon Akamai SureServer CA G14-SHA2
            1 s:/C=NL/L=Amsterdam/O=Verizon Enterprise Solutions/OU=Cybertrust/CN=Verizon Akamai SureServer CA G14-SHA2
              i:/C=IE/O=Baltimore/OU=CyberTrust/CN=Baltimore CyberTrust Root
            2 s:/C=IE/O=Baltimore/OU=CyberTrust/CN=Baltimore CyberTrust Root
              i:/C=US/O=GTE Corporation/OU=GTE CyberTrust Solutions, Inc./CN=GTE CyberTrust Global Root
           ---
           Server certificate
           -----BEGIN CERTIFICATE-----
           MIIFazCCBFOgAwIBAgIUDA4Qj7N4ZICv2EywdNJHBMwTV2cwDQYJKoZIhvcNAQEL
           BQAwgY0xCzAJBgNVBAYTAk5MMRIwEAYDVQQHEwlBbXN0ZXJkYW0xJTAjBgNVBAoT
           HFZlcml6b24gRW50ZXJwcmlzZSBTb2x1dGlvbnMxEzARBgNVBAsTCkN5YmVydHJ1
           c3QxLjAsBgNVBAMTJVZlcml6b24gQWthbWFpIFN1cmVTZXJ2ZXIgQ0EgRzE0LVNI
           QTIwHhcNMTUwNTA3MTkwNzMxWhcNMTYwNTA3MTkwNzI5WjBzMQswCQYDVQQGEwJV
           UzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEUMBIGA1UEChMLVk13
           YXJlIEluYy4xFjAUBgNVBAsTDUlUIE9wZXJhdGlvbnMxFTATBgNVBAMMDCoudm13
           YXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALT8ymERnsE4
           zON+w+rmsEkQ8vmLohan/abkssmhiBCShqKryz7bMRX1JVCakqjspiXhwPW78/ri
           FsGaHJS5DhkPB3v5on6BUjV73QjFjT9zlTp3KC9ABrykZa0RmpFGfoDiDmbqzJw2
           MQ+GHGg3M8lzOalUKhOVUuBVf7VTijnfhWoDMaHtxqMzI0abLUQWZ3AobHewWvgW
           pnTD5hbgTYXcvRfZBDWXQjQOlWYW/0mVG6YiJvOZcyxzwU4oaEXGmHxvQd8TNdNN
           sguR0JMcFfSYHtQQpn4a2Vs/fLo/yAVqUM5Jwp5ENZx8h1uMS1WaGKAXME+/7JZC
           iUFt8KBxSTUCAwEAAaOCAdowggHWMAwGA1UdEwEB/wQCMAAwTAYDVR0gBEUwQzBB
           BgkrBgEEAbE+ATIwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly9zZWN1cmUub21uaXJv
           b3QuY29tL3JlcG9zaXRvcnkwga8GCCsGAQUFBwEBBIGiMIGfMC0GCCsGAQUFBzAB
           hiFodHRwOi8vdmFzc2cxNDIub2NzcC5vbW5pcm9vdC5jb20wNgYIKwYBBQUHMAKG
           Kmh0dHBzOi8vY2FjZXJ0LmEub21uaXJvb3QuY29tL3Zhc3NnMTQyLmNydDA2Bggr
           BgEFBQcwAoYqaHR0cHM6Ly9jYWNlcnQuYS5vbW5pcm9vdC5jb20vdmFzc2cxNDIu
           ZGVyMBcGA1UdEQQQMA6CDCoudm13YXJlLmNvbTAOBgNVHQ8BAf8EBAMCBaAwHQYD
           VR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1UdIwQYMBaAFPi9+q9zd8bH
           G/lLTRGn0TOvr3IRMD4GA1UdHwQ3MDUwM6AxoC+GLWh0dHA6Ly92YXNzZzE0Mi5j
           cmwub21uaXJvb3QuY29tL3Zhc3NnMTQyLmNybDAdBgNVHQ4EFgQUf2tn6ZDhB5ME
           m+7X3XfaFDzBC9UwDQYJKoZIhvcNAQELBQADggEBAJcQ39IzDf66923gFZ+3/6EF
           oPg3O42WpNTO9EwIhD+E0fOHjkvXsRrBIaMaqxcsHAFZE6M3nBVc7bjq1eJSvS6K
           x1csnAFNA/KuIgAb1qmlAyi047+W48tyXzsD1sYLOCX9xOM8CyMn2fiGSnlHU0Sy
           9y5E12yS5xQnwea5bGlvwKi86qF2HJhEVaajR6nbLRrPtEAyRMckYHLUfQkIBebc
           ++xpIRzKTF1/JjoQdPR3CbHMsixPa0vqwmteT3tKAFZ4aNT3Jdfxpqn9zE0UQBDg
           XO7vDlBkT0qP/rlicgDSPfDLj9A62H2m15h3CbN8bqt4GSris6mNGpUPwIi331g=
           -----END CERTIFICATE-----
           subject=/C=US/ST=CA/L=Palo Alto/O=VMware Inc./OU=IT Operations/CN=*.vmware.com
           issuer=/C=NL/L=Amsterdam/O=Verizon Enterprise Solutions/OU=Cybertrust/CN=Verizon Akamai SureServer CA G14-SHA2
           ---
           No client certificate CA names sent
           Server Temp Key: ECDH, prime256v1, 256 bits
           ---
           SSL handshake has read 4410 bytes and written 373 bytes
           ---
           New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES256-GCM-SHA384
           Server public key is 2048 bit
           Secure Renegotiation IS NOT supported
           Compression: NONE
           Expansion: NONE
           SSL-Session:
               Protocol  : TLSv1.2
               Cipher    : ECDHE-RSA-AES256-GCM-SHA384
               Session-ID: AFCF064B5C86DF3845FEF70235135EA3D2FF6C47878925F1FF03C21D23F53977
               Session-ID-ctx: 
               Master-Key: 883D9800B759F040827C3C6633C092B3A5D8B06CC617CACE38C41F80C35E3C148E6615DA29F329B4C4192D5F10F6D860
               Key-Arg   : None
               Krb5 Principal: None
               PSK identity: None
               PSK identity hint: None
               TLS session ticket lifetime hint: 7200 (seconds)
               TLS session ticket:
               0000 - 10 de 06 f9 43 3e 69 71-27 10 44 d2 35 ec 22 6a   ....C>iq'.D.5."j
               0010 - 21 33 75 ca 79 a3 13 5b-0f 39 7b 7b bc 7a 3d 5a   !3u.y..[.9{{.z=Z
               0020 - 77 8c ec 5d c8 90 1f b7-fd 8a 48 6d b7 9a 1f 1a   w..]......Hm....
               0030 - 61 2d 0c ef 29 c8 96 9e-7d 0f 9f 73 33 a6 76 03   a-..)...}..s3.v.
               0040 - 96 5d fc d5 36 15 00 8b-e5 4d ea b0 75 ca 9b f3   .]..6....M..u...
               0050 - 9e 64 02 51 d3 df e7 71-b2 56 2d 5c be af 69 0b   .d.Q...q.V-\..i.
               0060 - f0 6f 30 04 37 77 19 fa-23 50 e1 bb d9 c0 5c cf   .o0.7w..#P....\.
               0070 - a6 14 b7 7b d9 7a 65 66-8f a1 6d d6 66 38 f4 2f   ...{.zef..m.f8./
               0080 - a4 c2 b0 4e bb ba 2c ea-c4 26 57 d9 a0 43 47 3a   ...N..,..&W..CG:
               0090 - de 73 40 22 fe 98 b9 0a-a7 40 f2 a5 6d 0a fa 44   .s@".....@..m..D

               Start Time: 1455540695
               Timeout   : 300 (sec)
               Verify return code: 20 (unable to get local issuer certificate)
           ---
           closed
         #+END_EXAMPLE
     - on Initial Understanding a/o Discovery
     - on Packer Provision a/o Deploy to vSphere Resources
     - on Building Images from 'vmware-iso'
       - /HINT/: 
   - Questions
   - log
     - [2016-02-15 Mon]
       - [2016-02-15 Mon 12:56] NGa seeks to abstractly automate the install of the vmware tools needed for using VM guests in VMware w/ vagrant
 - procedure :: fix, SSL/CA fault prevent Cent6 from downloading packages from VMware repos
   - nb, diagnose out of date ca-cert bundle preventing comms w/ VMware's repos
     - https://techjourney.net/update-add-ca-certificates-bundle-in-redhat-centos/
     - https://major.io/2012/02/07/using-openssls-s_client-command-with-web-servers-using-server-name-indication-sni/
     - http://stackoverflow.com/questions/24372942/ssl-error-unable-to-get-local-issuer-certificate
   - Q: is the =ca-certificate= package in =epel-release= new enough
     - A: No.

** howto, manage VMware w/ Python and PySphere                     :ARCHIVE:
:PROPERTIES:
:ID:       c9eea510-5136-4981-9e89-bdc97d4f0b9a
:END:
 - context :: 
   - [0/1] overview
     - [ ] document basic config requirements
   - info/notes
     - srcs
       - https://code.google.com/p/pysphere/wiki/GettingStarted
       - https://dellaert.org/2013/03/04/pysphere-script-to-clone-a-template-into-multiple-vms-with-post-processing/
     - on using pysphere module
       - see 'howto, connect to VMware w/ PySphere'
       - use the vCSA creds and the url, https://fqdn:443/sdk
     - on the Different Types of Cloning
       #+CAPTION: Which 'clone' operations require the Resource Pool 
       |   | from     | to       | rescpool? | desc                                         |
       |---+----------+----------+-----------+----------------------------------------------|
       |   | VM       | VM       | optional  | (when unset, defaults to 'src' VMs rescpool) |
       |   | VM       | Template | ignored   |                                              |
       |   | Template | Template | ignored   |                                              |
       |   | Template | VM       | required  |                                              |
   - Questions
     - Q: is the Pysphere module avaiable via a Debian package
       - perhaps using the =python-psphere=, =python-pyvmomi=, or it's ilk
     - Q: why isn't =salt-cloud='s vsphere integration working
       - the virtualenv/pip installed 'pysphere' module isn't being loaded by python for some reason
       - vsphere.py is only in [[/usr/lib/python2.7/dist-packages/salt/cloud/clouds/vsphere.py]] which isnt in most python module lookup paths
       - to test, I'll add the dir to the =salt-cloud= invocation as below
         : env PYTHONPATH="${VIRTUAL_ENV}/lib/python2.7/site-packages" salt-cloud -c ./etc/salt/ -p salt_named_cloud_profile -Q
       - A: the 'pysphere' module didn't load because it was not in the module lookup path. To fix, create venv's as below:
         : mkvirtualenv VIRTUAL_ENV  to the =$PYTHONPATH= in the venv
         - to ensure that pip-installed packages are properly available
         - To fix in be resolved =pip=-installed package's path to the =$PYTHONPATH= in the venv so that the
   - log
     - [2014-12-01 Mon]
       - req'd module, =pysphere= not pre-installed or available in debian repos
       - for my purposes, I'm going to add it to a venv during testing
       - to this end, I'm installing =virtualenvwrapper= and creating
         the venv as below
         #+BEGIN_EXAMPLE
         mkvirtualenv --system-site-packages salt-vcenter
         pip -U pysphere
         
         #+END_EXAMPLE
       - installed =salt-cloud= and upgraded =salt-ssh= from =experimental= repo
     - [2015-02-04 Wed]
       - able to connect to and query Boron using pysphere in an
         interprative python shell by creating a virtualenv and
         following the guide at
         https://code.google.com/p/pysphere/wiki/GettingStarted
 - procedure :: create virtualenv for VMware integration with Salt
   - one shot command (untested)
     : mkvirtualenv --system-site-packages -i pysphere salt-vsphere
   - *OR* a multi-step setup
     - create the named virtualenv
       : mkvirtualenv salt-vsphere
     - enable site packages by toggling to 'active'
       : toggleglobalsitepackages
     - install pysphere
       : pip install -U pysphere
     - (from w/i the venv) ensure the venv site-packages path is in =$PYTHONPATH=
       : export PYTHONPATH="${VIRTUAL_ENV}/lib/python2.7/site-packages"
       *OR* 
       : add2virtualenv "${VIRTUAL_ENV}/lib/python2.7/site-packages"
 - procedure :: fix, EM: "Failed to ... global name 'VIServer' is not defined"
   - nb,
     - this error indicates that the python module =pysphere= is not available
     - req'd module, =pysphere= not pre-installed or available in debian repos
     - for my purposes, I'm going to add it to a venv during testing
     - to this end, I'm installing =virtualenvwrapper= and creating
       the venv as below
   - install =pysphere= python module
     #+BEGIN_EXAMPLE
     mkvirtualenv --system-site-packages salt-vcenter
     pip -U pysphere
         
     #+END_EXAMPLE
   - add the venv's site-packages path to the =$PYTHONPATH=, (ex. below)
     : export PYTHONPATH="${VIRTUAL_ENV}/lib/python2.7/site-packages:${PYTHONPATH}"
     - ya, seems like this should be happening automatically don'it
 - procedure :: howto, connect to VMware w/ PySphere (for interactive a/o testing uses)
   - nb
     - req's v5+ vCSA (ex. boron) *OR* a ESXi server w/ API features (w/ applicable license)
     - the server connection seems to timeout after some time
   - create a Salt-VMware integration virtualenv, (see procedure below)
   - open interactive python shell
   - import the module
     : from pysphere import VIServer
   - create a =VIServer= object
     : server = VIServer()
   - establish a connection using the object
     : server.connect("https://fqdn:443/sdk", "root", '''<redacted>''')
 - procedure :: howto, query VMware resources w/ PySphere
   - all VMs and Hosts are queriable
   - list all VMs
     : server.get_registered_vms()
   - create a object representing a VM
     : vm01 = server.get_vm_by_name("Windows XP Professional")
     or
     : vm1 = server.get_vm_by_path("[DataStore1] Ubuntu/Ubuntu-10.vmx")
     or
     : vm1 = server.get_vm_by_path(server.get_registered_vms()[0])
   - get VM info via object
     : print vm01.get_status()
     or 
     : print vm01.get_properties()
   - get Templates info
     - list all templates
       #+BEGIN_SRC python
       from pysphere import VIServe

       s = VIServer()
       s.connect(HOST, USER, PASSWORD)

       template_list = s.get_registered_vms(advanced_filters={'config.template':True})

       # If you want to get the properties of each (for example) you can do:

       for t in template_list:
       vm = s.get_vm_by_path(t)
       prop = vm.get_properties()
       print(prop['name'])       

       #+END_SRC
   - get VM resource pool name 
     : print vm1.get_resource_pool_name()
   - to disconnect from server
     : server.disconnect()
   - more info here: https://code.google.com/p/pysphere/wiki/GettingStarted
 - procedure :: howto, manipulate VMware resources w/ PySphere
   - manipulate VMs power-state
     - guest view
       #+BEGIN_SRC python
       vm1.shutdown_guest()
       vm1.reboot_guest()
       vm1.standby_guest()
       #+END_SRC
     - host-view
       #+BEGIN_SRC python
       # create VM object
       vm1 = server.get_vm_by_path(server.get_registered_vms()[0])

       # Power On
       >>> vm1.power_on()

       # as w/ all of these command, the ~sync_run=False~ argument can be provided to make the call non-blocking
       # the call returns a 'task' object, which can be used to query the state of the call
       # Async Power On
       >>> task1 = vm1.power_on(sync_run=False)

       # Restart, (VM must already be 'Powered On')
       >>> vm1.reset()

       # Suspend
       >>> vm1.suspend() #since pysphere 0.1.5

       # Power Off
       >>> vm1.power_off()           

       #+END_SRC
   - manipulate VM snapshots
     - list snapshots
       #+BEGIN_SRC python
       snapshot_list = vm2.get_snapshots()             

       # BTW
       for snapshot in snapshot_list:
          print "Name:", snapshot.get_name()
          print "Description", snapshot.get_description()
          print "Created:", snapshot.get_create_time()
          print "State:", snapshot.get_state()
          print "Path:", snapshot.get_path()
          print "Parent:", snapshot.get_parent()
          print "Children:", snapshot.get_children()

       #+END_SRC
              
       #+CAPTION: expect output of a similar form
       #+BEGIN_QUOTE
       """
       Name: base_old
       Description:
       Created: (2008, 7, 30, 18, 0, 17, 54, 0, 0)
       State: poweredOn
       Path: /base_old
       Parent: None
       Children: [<pysphere.vi_snapshot.VISnapshot instance at 0x052448A0>]
       Name: base
       Description: With Service Pack 2
       Created: (2011, 9, 28, 11, 9, 36, 165, 0, 0)
       State: poweredOn
       Path: /base_old/base
       Parent: <pysphere.vi_snapshot.VISnapshot instance at 0x05244738>
       Children: []
       """
       #+END_QUOTE
     - to create a snapshot
       #+BEGIN_SRC python

         # create snapshot called "mysnapshot"
         vm1.create_snapshot("mysnapshot")

         # asynchronously start creation of snapshot "mysnapshot", return task
         #  object to variable 'task1' to monitor state a/o progress
         task1 = vm1.create_snapshot("mysnapshot", sync_run=False)

         # same as above, but quite memory first, for a safer and more consistent snapshot
         vm1.create_snapshot("fastsnapshot", memory=False, quiesce=False)

       #+END_SRC
   - manipulate VM templates
     - list all VM templates (aka "Images")
       - from https://groups.google.com/forum/#!searchin/pysphere/template/pysphere/o9RHp8fD0y0/OA0vIqZ-M-gJ
         #+CAPTION: Example 1: A way to find all the VMs that are templates
         #+BEGIN_SRC python
         from pysphere import VIServer, MORTypes
         from pysphere.vi_virtual_machine import VIVirtualMachine
               
         s = VIServer()
         s.connect(HOST, USER, PASSWORD)
               
         props = s._retrieve_properties_traversal(property_names=['name', 'config.template'], 
                                                  from_node=None, obj_type=MORTypes.VirtualMachine)
               
               
         for p in props:
             mor = p.Obj
             name = ""
             is_template = False
             for item in p.PropSet:
                 if item.Name == "name": name = item.Val
                 elif item.Name == "config.template": is_template = item.Val
             if is_template: print "MOR:", mor, " - Name:", name
                   
         #MIGHT PRINT SOMETHING LIKE:
         #MOR: vm-11212  - Name: Gentoo 2012.1 clean
         #MOR: vm-6869  - Name: Windows 2000 Professional
         #MOR: vm-6201  - Name: Windows 2003 Enterprise Edition SP1
         #MOR: vm-6286  - Name: Windows 2003 Enterprise Edition SP2
         #MOR: vm-6705  - Name: Windows Server 2008 SP1 Enterprise Edition
         #MOR: vm-11327  - Name: Windows Vista Ultimate SP0 (SP1 , SP2)
         #MOR: vm-3180  - Name: Windows Vista Ultimate SP0 (Solo para SP0)
         #MOR: vm-2963  - Name: Windows XP Profesional SP3
               
               

         #+END_SRC
         This can be much easier you know the Template's name as you mentioned
               
         #+CAPTION: Example 2: Cloning from a template
         #+BEGIN_SRC python
         all_vms =  s._get_managed_objects(MORTypes.VirtualMachine, from_mor=None)
         #you can filter from cluster, datacenter, host, etc by setting
         #'from_mor' parameter to a managed object reference
               
         vm = None
         target_name = "My Template Name"
               
         for mor, name in all_vms.iteritems():
             if name == target_name:
                 vm = VIVirtualMachine(s, mor)
                 break
                   
         if not vm:
             raise Exception("VM Template Not found")
               
         print vm.properties.config.template
               
         new_vm = vm.clone("The New deployed VM Name", ... rest of the parameters...) 
               
         #I think is mandatory to provide the 'resourcepool' parameter to the clone
         #method when cloning from a template, the value you need to pass is the
         #MOR of the resource pool where you want to place the VM.
         # you can get those MORs from the keys of the dictionary returned by
         # s.get_resource_pools()

               
         #+END_SRC
   - manipulate VM files and dirs, (req's auth to guest)
     - requires that the guest OS have VMware Tools installed, does not require network access to the guest OS
     - Q: does this require the Guest OS to be network accessible or does it perhaps work as if from the Guest's console
       - tested on a guest VM w/ no network connection
       - A: No guest-accessible network is required. This can be thought of as acting at the local console. (tested w/ Linux guest)
     - first, login to guest OS
       #+BEGIN_SRC python
       vm2.login_in_guest("admin", "secret")             
             
       #+END_SRC
     - and then, go nuts
       #+CAPTION: relevant function signatures
       #+BEGIN_QUOTE
       make_directory(path, create_parents=True): Creates a directory in the guest OS specified by path, if create_parents is True (default) all the directory components in the path are created if they don't exist.
       move_directory(src_path, dst_path): Moves or renames a directory in the guest system from src_path to dst_path.
       delete_directory(path, recursive): Deletes the directory specified by path in the guest OS. If recursive is True all subdirectories and files are also deleted, else the operation will fail if the directory is not empty.
       list_files(path, match_pattern=None): Returns information about files or directories from the guest system. path is the complete path to the directory or file to query. match_pattern is a filter for the return values specified as a perl-compatible regular expression (if not provided then '.' is used). The method returns a list of dictionaries with these keys:
           path: The complete path to the file
           size: The file size in bytes
           type: either 'directory', 'file', or 'symlink' 
       get_file(guest_path, local_path, overwrite=False): Downloads a file from the guest to the system running pysphere.
       send_file(local_path, guest_path, overwrite=False): Uploads a file from the system running pysphere to the guest system.
       move_file(src_path, dst_path, overwrite=False): Renames a file in the guest system from src_path to dst_path. If overwrite is False (default) and dst_path already exists the method fails, while if overwrite is set to True clobbers any existing file.
       delete_file(path): Deletes the file specified by path from the guest system. 
             
       #+END_QUOTE
       #+CAPTION: some examples
       #+BEGIN_SRC python
             
       #
       vm2.login_in_guest("admin", "secret")

       #
       vm2.send_file("/home/seba/netcat.exe", r"c:\netcat.exe")

       #
       vm2.make_directory(r"c:\my\binary\tools")

       #
       vm2.move_file(r"c:\netcat.exe", r"c:\my\binary\tools\nc.exe")

       #
       for f in vm2.list_files(r"c:\my\binary\tools"):
          print "'%s' is a %s of %s bytes." % (f['path'], f['type'], f['size'])

       # output
       #          '.' is a direcotory of None bytes.
       #          '..' is a directory of None bytes.
       #          'nc.exe' is a file of 1258291 bytes.

       #
       vm2.delete_directory(r"c:\my", True)             

       #+END_SRC
   - manipulate VM processes
     - execute process
       #+BEGIN_SRC python
       #
       pid = vm.start_process('/usr/bin/ifconfig', ['eth0', '10.10.10.10/24'])             

       #+END_SRC
       - Be mindful that process output is not returned via start_process.
       - Where significant you're advised to redirect to a file,
         then read the contents of that file (by pulling the
         file with =vm.get_file()=), as needed
   - manipulate VM life-cycle (create, clone, destroy, etc)
     - nb
       - (editorial) I was hoping for the ability to create (from:
         args, template, etc), clone, and delete VMs but, (as of
         [2015-02-13 Fri]).
       - I see a facility for a =clone=, and a =migrate=
         function. Hopefully it's buried in the code somewhere.
     - (untested) create new VM, (must provide Resource Group?)
       #+BEGIN_SRC python
         from pyspere import VIServer, MORTypes

         s = VIServer()
         s.connect(HOST, USER, PASSWORD)

         destination_folder = "Automation"
         destination_mor = None

         # get all folders, returns a dictionary where keys are managed object
         #  references (MORS) and values are the folder names
         folders = s._get_managed_objects(MORTypes.Folder)

         #Iterate through all folders looking for the "Automation" folder
         for mor, folder_name in folders.items():
             print "Folder: %s (%s)"% (folder_name, mor)
             if folder_name == destination_folder:
                 destination_mor = mor

         # ... rest of the script ...

         folder_mor = create_vm_request.new__this(destination_mor) 
         folder_mor.set_attribute_type(destination_mor.get_attribute_type()) 
         create_vm_request.set_element__this(folder_mor) 

       #+END_SRC
     - (untested) create linked clone VM
       #+BEGIN_SRC python
       vm = server.get_vm_by_path("[datastore] path/to/config.vmx")
       snapshot = vm.get_snapshots()[0]

       vm2 = vm.clone("new vm", snapshot=snapshot, linked=True)       
       #+END_SRC
     - clone a VM
       - (nb) perhaps this could be used to clone from templates and subsequently configured a/o customized via the console-oriented guest OS file manip
