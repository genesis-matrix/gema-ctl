# -*- mode: org -*-
#+SETUPFILE: ~/.vault/cfgs/org-central/org-setupfile
#+TITLE: notes on Genesis Controller

* synopsis
 - Genesis Controller is a portable and scriptable workstation for modeling, reasoning, and communicating about computer technology topics.
* advisement
 - This is a work in progress. 
 - The hope is to adopt a PR-based workflow. 
 - Until the first release, Master should be regarded as volatile.
* chapters
** Introduction to Genesis Controller
:PROPERTIES:
:ID: C1724956-2CEB-4E46-BFF5-43307D2258A3
:END:

 - context ::
   - [0/3] overview
     - [ ] Q: who is this for
     - [ ] Q: what problem does it solve
     - [ ] Q: why is it needed now
   - info/notes
     - srcs
       #+CAPTION: reference list
       | ! | title                                                             | url                                                                     | desc                      | rowid   |
       |---+-------------------------------------------------------------------+-------------------------------------------------------------------------+---------------------------+---------|
       | / |                                                                   |                                                                         |                           | <7>     |
       | # | Using SaltStack to automate Vagrant provisioning BY AYMEN EL AMRI | http://eon01.com/blog/using-saltstack-to-automate-vagrant-provisioning/ | Inspiration and Prior Art | <<9F454D0A-9B6A-4F03-A4E4-A9FECE5E91D0>> |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Desired End State Description a/o Requirements Matrix
       - a master that is quickly bootstraped to be fully and dynamically manipulable
       - treating all control data as git-backed data sources
     - on Design Goals, Assumptions, and Objectives
       - specifically to enable operational agility
       - using some tools and conventions
   - Questions
     - Q: who is this for
     - Q: what problem does it solve
     - Q: why is it needed now
   - log

 - procedure :: howto, enter a light-weight "primed" design environment in Vagrant
   - nb
     - useful for quickly designing and testing states
     - configures, (and creates if not already existant), a Salt Master that is carefully balanced for optimal express power and understandability
   - start, provision instance, then ssh into instance
     #+BEGIN_SRC bash :results drawer :wrap EXAMPLE :dir . :var vm_instance="salt-master-d1"
       make vagrant-into-salt-master-d1 
     #+END_SRC
 - procedure :: howto, enter a robust, opinionated, and production-oriented design environment in Vagrant 
   - nb
     - includes and extends the setup of the "lightweight" design environment
     - useful for working on Salt infrastructure design
     - useful for testing more complicated states, event-based interactions and service integrations
     - configures, (and creates if not already existant), a Salt Master that is organized around enabling operational deployments
   - create and enter a "primed" salt-master, by typing =make vagrant-into-salt-master-d1= at the =genesis-ctl= root working-dir
   - convert the salt-master from the "primed" config to the "GeMa" config set
     #+BEGIN_SRC bash :results drawer :wrap EXAMPLE
     salt-call state.highstate # from CLI w/i a "primed" Salt Master
     #+END_SRC

 - procedure :: howto, install =genesis-ctl=
   - nb
     - using a package manager is recommended where possible. Linux has =apt= and =yum=, Windows has =choco=, and MacOSX has =brew=.
     - due to work/life circumstances, work and testing on GeMa takes place mostly with VMware Fusion on MacOSX.
     - while not presently tested on Windows and Linux, it's considered desirable, and may be feasible with some expert effort
   - for MacOSX instructions, see [[file:usr/doc/ref-INSTALL.org][Initial GeMa Setup on MacOSX]]

** howto, Use this Repo
:PROPERTIES:
:ID: 4C708EA9-D4FA-4D3A-B0AC-D102320A2171
:END:

 - context ::
   - [0/5] overview
     - [ ] demo: event system via system alerting
     - [ ] demo: state system via machine provisioning
     - [ ] demo: state and targeting system via application a/o service provisioning
     - [ ] demo: reactor system via security response to events
     - [ ] capstone demo: orchestration system via auto-scaling
   - info/notes
     - srcs
       #+NAME: 4C708EA9-D4FA-4D3A-B0AC-D102320A2171-srcs
       #+CAPTION: reference list
       | ! | title                       | url                             | desc |
       |   | title                       | url                             | desc |
       |---+-----------------------------+---------------------------------+------|
       | / |                             |                                 |      |
       | # | Defined Terms (aka Lexicon) | [[file:usr/doc/doc-LEXICON.org]]    |      |
       | # | Project Roadmap             | [[file:usr/doc/doc-ROADMAP.org]]    |      |
       | # | reference: Installation     | [[file:usr/doc/ref-INSTALL.org]]    |      |
       | # | reference: Saltstack        | [[file:usr/doc/ref-Salt.org]]       |      |
       | # | reference: Vagrant          | [[file:usr/doc/ref-Vagrant.org]]    |      |
       | # | reference: Packer           | [[file:usr/doc/ref-Packer.org]]     |      |
       | # | reference: Virtualbox       | [[file:usr/doc/ref-Virtualbox.org]] |      |
       | # | reference: VMware           | [[file:usr/doc/ref-VMware.org]]     |      |
       #+TBLFM: 

     - on Genesis Modules: SLS, PLR, PKI, CFG, et al
       #+NAME: 3F5E0228-1367-4FCB-83F8-F4968943AB45
       #+CAPTION: on Genesis Modules: SLS, PLR, PKI, et al
       |   | key | desc              | uri_smod                  | uri_ctl_use          |
       |---+-----+-------------------+---------------------------+----------------------|
       | / |     |                   |                           |                      |
       |   | CTL | Lab/Workstation   | [[https://github.com/genesis-matrix/genesis-ctl][genesis-ctl]]               | ./.                  |
       |   | SLS | Policy Store      | [[https://github.com/genesis-matrix/genesis-sls-core][genesis-sls-core]]          | ./srv/roots/base     |
       |   | PLR | Variable Store    | [[https://github.com/genesis-matrix/genesis-plr-core][genesis-plr-core]]          | ./srv/pillar/base    |
       |   | PKI | Graph Trust Store | (ex.) [[https://github.com/genesis-matrix/genesis-pki-example][genesis-pki-example]] | ./etc/salt/pki/master |

       - fork, blend, or replace these repos with your own efforts
       - the submodule names follow the convention: =project_name= - =component= - =label=,
         - such that you may experiment with your own personal 'sls' repo called =genesis-sls-foobar=
         - the =core= label indicates that this is part of the set of upstream repos and intended to be publicly shared
         - all =core= repos exist so be easily forked as a basis for private repos
         - consider sharing "common" state, configs, a/o pillars with the upstream =core= repo by way of pull requests
       - to replace the =genesis-sls-core= repo with your own
         =genesis-sls-foobar= repo:
         - add the =genesis-sls-foobar= submodule to
           =./mnt/git/genesis-sls-foobar=, then
         - update the symlink at =./mnt/git/genesis-sls= to point at it
         - in this way you can safely track and blend multiple upstream sources while easily switching among them
       - a Minion =grain=, (a key-value store) with key =provision_target= and value =vagrant= is added to each minion by Vagrant's provisioner and is used to record generally static attibutes.
   - Questions
   - log

** info, Targeted Service Integrations
:PROPERTIES:
:ID: BFF0A84D-BBFD-4ECE-B9B5-86DFA91CBA08
:END:

 - context ::
   - [0/0] overview
   - info/notes
     - srcs
       #+NAME: BFF0A84D-BBFD-4ECE-B9B5-86DFA91CBA08-srcs
       #+CAPTION: reference list
       |!|title|url|desc|rowid|
       | |title|url|desc|rowid|
       |-|-----|---|----|-----|
       |/|     |   |    | <7> |
       |#|     |   |    |     |
       #+TBLFM: $5='(if (and (string= @1$rowid "rowid") (string= $rowid "")) (concat "<<"(org-id-new) ">>") $rowid)
     - on Initial Understanding a/o Discovery
       - The purpose is to demonstrate a scaled-down but fully-realized Salt master with practical and representative service integrations.
       - In the implementation of these 
       - The listing of services to integrate with Salt:
         |   |     |                              |                        |
         |---+-----+------------------------------+------------------------|
         | / |     |                              |                        |
         |   | wip | logging                      | ELK, syslog            |
         |   | wip | realtime data source         | MongoDB                |
         |   | wip | CM-controlled data source    | Github/Gitolite/GitLab |
         |   | wip | operating console, WebGUI    | Saltpad                |
         |   | wip | alerting                     | Pushover               |
         |   | wip | chatops                      | ErrBot                 |
         |   | wip | container cluster mgmt layer | kubernetes             |
         |   | wip | rapid-deploy apps            | docker/rocket          |
   - Questions
   - log
